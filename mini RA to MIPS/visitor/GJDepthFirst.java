//
// Generated by JTB 1.3.2
//

package visitor;
import syntaxtree.*;

import java.awt.Stroke;
import java.util.*;

/**
 * Provides default methods which visit each node in the tree in depth-first
 * order.  Your visitors may extend this class.
 */
public class GJDepthFirst<R,A> implements GJVisitor<R,A> {
   //
   // Auto class visitors--probably don't need to be overridden.
   //
	
	String destReg;
	int inArgs, outArgs;
	boolean printLabel;
	
   public R visit(NodeList n, A argu) {
      R _ret=null;
      int _count=0;
      for ( Enumeration<Node> e = n.elements(); e.hasMoreElements(); ) {
         e.nextElement().accept(this,argu);
         _count++;
      }
      return _ret;
   }

   public R visit(NodeListOptional n, A argu) {
      if ( n.present() ) {
         R _ret=null;
         int _count=0;
         for ( Enumeration<Node> e = n.elements(); e.hasMoreElements(); ) {
            e.nextElement().accept(this,argu);
            _count++;
         }
         return _ret;
      }
      else
         return null;
   }

   public R visit(NodeOptional n, A argu) {
      if ( n.present() )
         return n.node.accept(this,argu);
      else
         return null;
   }

   public R visit(NodeSequence n, A argu) {
      R _ret=null;
      int _count=0;
      for ( Enumeration<Node> e = n.elements(); e.hasMoreElements(); ) {
         e.nextElement().accept(this,argu);
         _count++;
      }
      return _ret;
   }

   public R visit(NodeToken n, A argu) { return (R)n.tokenImage; }

   String curr_func="";
   boolean in_move=false;
   boolean in_print=false;
   boolean in_call=false;
   boolean in_alloc=false;
   boolean in_jump=false;
   boolean in_func=false;
   boolean in_binop=false;
   String dest="";
   //String bin_op_dest="";
   int n_args=0;
   int max_call=0;
   
   //
   // User-generated visitor methods below
   //

   /**
    * f0 -> "MAIN"
    * f1 -> "["
    * f2 -> IntegerLiteral()
    * f3 -> "]"
    * f4 -> "["
    * f5 -> IntegerLiteral()
    * f6 -> "]"
    * f7 -> "["
    * f8 -> IntegerLiteral()
    * f9 -> "]"
    * f10 -> StmtList()
    * f11 -> "END"
    * f12 -> ( SpillInfo() )?
    * f13 -> ( Procedure() )*
    * f14 -> <EOF>
    */
   public R visit(Goal n, A argu) {
      R _ret=null;
            
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      String args = (String) n.f2.accept(this, argu);
      n_args = Integer.valueOf(args);
      
      n.f3.accept(this, argu);
      n.f4.accept(this, argu);
      String num2 = (String) n.f5.accept(this, argu);
      int n2 = Integer.valueOf(num2);
      
      n.f6.accept(this, argu);
      n.f7.accept(this, argu);
      String num3 = (String) n.f8.accept(this, argu);
      int n3 = Integer.valueOf(num3);
      max_call=n3;
      
      int temp_num1 =0;
      int temp_num2=0;
      if(n_args>4)
      {
        temp_num1 = n_args-4;
      }
      if(n3>4)
      {
        temp_num2 = n3-4;
      }
      
      int stack_space = 4+4*(n2-temp_num1+temp_num2);
      
      n.f9.accept(this, argu);
      System.out.println(".text");
      System.out.println(".globl\tmain");
      System.out.println("main:");
      
      if(n_args>0)
      {
        //need to generalize for when there are non zero args
      }
      System.out.println("move $fp, $sp");  
      //System.out.println("subu $sp, $sp, 4");
      System.out.println("sw $ra, -4($fp)");  
      System.out.println("subu $sp, $sp, "+stack_space);
      
      n.f10.accept(this, argu);
      System.out.println("lw $ra, -4($fp)");
      System.out.println("addu $sp, $sp, "+stack_space);       
      //System.out.println("jr $ra"); 
      System.out.println("li $v0, 10");
      System.out.println("syscall ");
        
      n.f11.accept(this, argu);
      n.f12.accept(this, argu);
      n.f13.accept(this, argu);
      System.out.println(".text");
      System.out.println(".globl _halloc");
      System.out.println("_halloc:");
      System.out.println("li $v0, 9");
      System.out.println("syscall");
      System.out.println("jr $ra");
      System.out.println("");
      System.out.println(".text");
      System.out.println(".globl _print");
      System.out.println("_print:");
      System.out.println("li $v0, 1");
      System.out.println("syscall");
      System.out.println("la $a0, newl");
      System.out.println("li $v0, 4");
      System.out.println("syscall");      
      System.out.println("jr $ra");
      System.out.println("");
      System.out.println(".data");
      System.out.println(".align   0");
      System.out.println("newl:    .asciiz \"\\n\" ");
      System.out.println(".data");
      System.out.println(".align   0");
      System.out.println("str_er:  .asciiz \" ERROR: abnormal termination\\n\" ");
      
      n.f14.accept(this, argu);
      
      
      return _ret;
   }

   /**
    * f0 -> ( ( Label() )? Stmt() )*
    */
   public R visit(StmtList n, A argu) {
      R _ret=null;
      printLabel = true;
      n.f0.accept(this, argu);
      printLabel = false;
      return _ret;
   }

   /**
    * f0 -> Label()
    * f1 -> "["
    * f2 -> IntegerLiteral()
    * f3 -> "]"
    * f4 -> "["
    * f5 -> IntegerLiteral()
    * f6 -> "]"
    * f7 -> "["
    * f8 -> IntegerLiteral()
    * f9 -> "]"
    * f10 -> StmtList()
    * f11 -> "END"
    * f12 -> ( SpillInfo() )?
    */
   public R visit(Procedure n, A argu) {
      R _ret=null;
      
      in_func=true;
      curr_func = (String) n.f0.accept(this, argu);
      in_func=false;
      
      n.f1.accept(this, argu);
      String args = (String) n.f2.accept(this, argu);
      n_args = Integer.valueOf(args);
      
      n.f3.accept(this, argu);
      n.f4.accept(this, argu);
      String num2 = (String) n.f5.accept(this, argu);
      int n2 = Integer.valueOf(num2);
      
      n.f6.accept(this, argu);
      n.f7.accept(this, argu);
      String num3 = (String) n.f8.accept(this, argu);
      int n3 = Integer.valueOf(num3);
      max_call=n3;
       
      n.f9.accept(this, argu);
      System.out.println("\n.text");
      System.out.println(".globl\t"+curr_func);
      System.out.println(curr_func+":");
      System.out.println("sw $fp, -8($sp)"); 
      System.out.println("sw $ra, -4($sp)");
      System.out.println("move $fp, $sp");
      
      int temp_num1 =0;
      int temp_num2=0;
      if(n_args>4)
      {
        temp_num1 = n_args-4;
      }
      if(n3>4)
      {
        temp_num2 = n3-4;
      }
      
      int stack_space = 8+4*(n2-temp_num1+temp_num2);

      System.out.println("subu $sp, $sp, "+stack_space); //combine last 2
           
      n.f10.accept(this, argu);
    
      System.out.println("addu $sp, $sp, "+stack_space);
      System.out.println("lw $ra, -4($sp)");
      System.out.println("lw $fp, -8($sp)");
            
      System.out.println("jr $ra");
      
      n.f11.accept(this, argu);
      n.f12.accept(this, argu);
      
      
      return _ret;
   }

   /**
    * f0 -> NoOpStmt()
    *       | ErrorStmt()
    *       | CJumpStmt()
    *       | JumpStmt()
    *       | HStoreStmt()
    *       | HLoadStmt()
    *       | MoveStmt()
    *       | PrintStmt()
    *       | ALoadStmt()
    *       | AStoreStmt()
    *       | PassArgStmt()
    *       | CallStmt()
    */
   public R visit(Stmt n, A argu) {
      R _ret=null;
      printLabel = false;
      n.f0.accept(this, argu);
      printLabel = true;
      return _ret;
   }

   /**
    * f0 -> "NOOP"
    */
   public R visit(NoOpStmt n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      System.out.println("nop");
      
      return _ret;
   }

   /**
    * f0 -> "ERROR"
    */
   public R visit(ErrorStmt n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      System.out.println("li $v0, 4");
      System.out.println("la $a0, str_er");  //fill in here   
      System.out.println("syscall");
      System.out.println("li $v0, 10");
      System.out.println("syscall");
      
      return _ret;
   }

   /**
    * f0 -> "CJUMP"
    * f1 -> Reg()
    * f2 -> Label()
    */
   public R visit(CJumpStmt n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      String r1 = (String) n.f1.accept(this, argu);
      
      in_jump=true;
      String l = (String) n.f2.accept(this, argu);
      in_jump=false;
      
      System.out.println("beqz $"+r1+" "+l);
      
      return _ret;
   }

   /**
    * f0 -> "JUMP"
    * f1 -> Label()
    */
   public R visit(JumpStmt n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      
      in_jump=true;
      String l = (String) n.f1.accept(this, argu);
      in_jump=false;
      
      System.out.println("b "+l);
      
      return _ret;
   }

   /**
    * f0 -> "HSTORE"
    * f1 -> Reg()
    * f2 -> IntegerLiteral()
    * f3 -> Reg()
    */
   public R visit(HStoreStmt n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      String r1 = (String) n.f1.accept(this, argu);
      String num = (String) n.f2.accept(this, argu);      
      String r2 = (String) n.f3.accept(this, argu);
      
      System.out.println("sw $"+r2+", "+num+"($"+r1+")");
      //sw $t2, 0($t0)
      
      return _ret;
   }

   /**
    * f0 -> "HLOAD"
    * f1 -> Reg()
    * f2 -> Reg()
    * f3 -> IntegerLiteral()
    */
   public R visit(HLoadStmt n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      String r1 = (String) n.f1.accept(this, argu);
      String r2 = (String) n.f2.accept(this, argu);
      String num = (String) n.f3.accept(this, argu);
      System.out.println("lw $"+r1+", "+num+"($"+r2+")");
      //lw $t1 0($t0)
      
      return _ret;
   }

   /**
    * f0 -> "MOVE"
    * f1 -> Reg()
    * f2 -> Exp()
    */
   public R visit(MoveStmt n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      String r1 = (String) n.f1.accept(this, argu);
      
      in_move=true; 
      dest=r1;
      n.f2.accept(this, argu);
      in_move=false;
            
      return _ret;
   }

   /**
    * f0 -> "PRINT"
    * f1 -> SimpleExp()
    */
   public R visit(PrintStmt n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      
      in_print=true;
      n.f1.accept(this, argu);
      in_print=false;
      
      System.out.println("jal _print");
      
      return _ret;
   }

   /**
    * f0 -> "ALOAD"
    * f1 -> Reg()
    * f2 -> SpilledArg()
    */
   public R visit(ALoadStmt n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      String r1 = (String) n.f1.accept(this, argu);
      String spill_num = (String) n.f2.accept(this, argu);
      int spill_no = 4 * Integer.valueOf(spill_num);
      
      //fill in here
      
      if((spill_no/4)>=0&&(spill_no/4)<(n_args-4))
      {
        System.out.println("lw $"+r1+", "+spill_no+"($fp)");
      } 
      else
      {
        if(max_call>4)
        {
          spill_no=spill_no+4*(max_call-4);
        }
        
        if(n_args>4)
        {
          spill_no=spill_no-4*(n_args-4);
        }
        
        System.out.println("lw $"+r1+", "+spill_no+"($sp)");
      }
      
      return _ret;
   }

   /**
    * f0 -> "ASTORE"
    * f1 -> SpilledArg()
    * f2 -> Reg()
    */
   public R visit(AStoreStmt n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      String spill_num = (String) n.f1.accept(this, argu);
      String r1 = (String) n.f2.accept(this, argu);
      int spill_no = 4 * Integer.valueOf(spill_num);
      
      //fill in here
      if((spill_no/4)>=0&&(spill_no/4)<(n_args-4))
      {
        System.out.println("sw $"+r1+" "+spill_no+"($fp)");
      } 
      else
      {
        if(max_call>4)
        {
          spill_no=spill_no+4*(max_call-4);
        }
        
        if(n_args>4)
        {
          spill_no=spill_no-4*(n_args-4);
        }
        
        System.out.println("sw $"+r1+" "+spill_no+"($sp)");
      }
      
      return _ret;
   }

   /**
    * f0 -> "PASSARG"
    * f1 -> IntegerLiteral()
    * f2 -> Reg()
    */
   public R visit(PassArgStmt n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      String num = (String) n.f1.accept(this, argu);
      int tnum = Integer.valueOf(num);
      
      String r1 = (String) n.f2.accept(this, argu);
      
      //fill in here
      System.out.println("sw $"+r1+" "+(tnum-1)*4+"($sp)");
      
      return _ret;
   }

   /**
    * f0 -> "CALL"
    * f1 -> SimpleExp()
    */
   public R visit(CallStmt n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
                  
      in_call=true;
      n.f1.accept(this, argu);
      in_call=false;      
      
      return _ret;
   }

   /**
    * f0 -> HAllocate()
    *       | BinOp()
    *       | SimpleExp()
    */
   public R visit(Exp n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "HALLOCATE"
    * f1 -> SimpleExp()
    */
   public R visit(HAllocate n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      
      in_alloc=true;
      n.f1.accept(this, null);
      in_alloc=false;
      
      //System.out.println("move $a0 $"+s_exp);
      System.out.println("jal _halloc");      
      System.out.println("move $"+dest+" $v0"); 
      
      return _ret;
   }

   /**
    * f0 -> Operator()
    * f1 -> Reg()
    * f2 -> SimpleExp()
    */
   public R visit(BinOp n, A argu) {
      R _ret=null;
      String op = (String) n.f0.accept(this, argu);
      
      in_binop=true;
      String r1 = (String) n.f1.accept(this, argu);
      //bin_op_dest = r1;
      String s_exp = (String) n.f2.accept(this, null);
      in_binop=false;
      
      if(in_move)
      {
        if(op.equals("LE"))
        {
          System.out.println("sle $"+dest+", "+r1+", "+s_exp);
        }
        else if(op.equals("NE"))
        {
          System.out.println("sne $"+dest+", "+r1+", "+s_exp);
        }
        else if(op.equals("PLUS"))
        {
          System.out.println("add $"+dest+", "+r1+", "+s_exp);
        }
        else if(op.equals("MINUS"))
        {
          System.out.println("sub $"+dest+", "+r1+", "+s_exp);
        }
        else if(op.equals("TIMES"))
        {
          System.out.println("mul $"+dest+", "+r1+", "+s_exp);
        }
        else if(op.equals("DIV"))
        {
          System.out.println("div $"+dest+", "+r1+", "+s_exp);
        }
      }
      
      return _ret;
   }

   /**
    * f0 -> "LE"
    *       | "NE"
    *       | "PLUS"
    *       | "MINUS"
    *       | "TIMES"
    *       | "DIV"
    */
   public R visit(Operator n, A argu) {
      R _ret=null;
      _ret = n.f0.accept(this, argu);
      return _ret;
      
      
   }

   /**
    * f0 -> "SPILLEDARG"
    * f1 -> IntegerLiteral()
    */
   public R visit(SpilledArg n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      _ret = n.f1.accept(this, argu);
      return _ret;
      
   }

   /**
    * f0 -> Reg()
    *       | IntegerLiteral()
    *       | Label()
    */
   public R visit(SimpleExp n, A argu) {
      R _ret=null;
      _ret = n.f0.accept(this, argu);
           
      return _ret;
   }

   /**
    * f0 -> "a0"
    *       | "a1"
    *       | "a2"
    *       | "a3"
    *       | "t0"
    *       | "t1"
    *       | "t2"
    *       | "t3"
    *       | "t4"
    *       | "t5"
    *       | "t6"
    *       | "t7"
    *       | "s0"
    *       | "s1"
    *       | "s2"
    *       | "s3"
    *       | "s4"
    *       | "s5"
    *       | "s6"
    *       | "s7"
    *       | "t8"
    *       | "t9"
    *       | "v0"
    *       | "v1"
    */
   public R visit(Reg n, A argu) {
      R _ret=null;
      String r1 = (String) n.f0.accept(this, argu);
      _ret = (R) r1;
      
      if(in_call)
      {
        System.out.println("jalr $"+r1);
      }
      else if(in_alloc)
      {
        //just return the reg
        System.out.println("move $a0 $"+r1);
      }
      else if(in_move)
      {
        if(!in_binop)
        {
          System.out.println("move $"+dest+" $"+r1);  
        }  
        
        if(in_binop)
        {
          _ret = (R) ("$"+r1);
        }
      }
      else if(in_print)
      {
        System.out.println("move $a0 $"+r1);    
      }
      
      return _ret;
   }

   /**
    * f0 -> <INTEGER_LITERAL>
    */
   public R visit(IntegerLiteral n, A argu) {
      R _ret=null;
      String num = (String) n.f0.accept(this, argu);
      
      if(in_alloc)
      {
        System.out.println("li $a0 "+num);
         _ret = (R) num;
      }
      else if(in_binop)
      {
         _ret = (R) num;
      }
      else if(in_move)
      {
        System.out.println("li $"+dest+" "+num);
      }
      else if(in_print)
      {
        System.out.println("li $a0 "+num);        
      }
      else
      {
        _ret = (R) num;
      }
      
      return _ret;
   }

   /**
    * f0 -> <IDENTIFIER>
    */
   public R visit(Label n, A argu) {
      R _ret=null;
      _ret = n.f0.accept(this, argu);
      
      if(in_call)
      {
        System.out.println("jal "+(String)_ret);
      }
      else if(in_alloc)
      {
        System.out.println("la $a0 "+(String)_ret); 
      }
      else if(in_move)
      {
        if(!in_binop)
        {        
          System.out.println("la $"+dest+" "+(String)_ret);
        }
      }
      else if(in_jump||in_func)
      {
        //return the label
      }
      else if(in_print)
      {
        //return the label
      }
      else
      {
        System.out.println((String)_ret+":");
      }
      
      return _ret;      
   }

   /**
    * f0 -> "//"
    * f1 -> SpillStatus()
    */
   public R visit(SpillInfo n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> <SPILLED>
    *       | <NOTSPILLED>
    */
   public R visit(SpillStatus n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      return _ret;
   }

}
