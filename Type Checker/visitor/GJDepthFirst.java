//
// Generated by JTB 1.3.2
//

package visitor;
import syntaxtree.*;
import java.util.*;

/**
 * Provides default methods which visit each node in the tree in depth-first
 * order.  Your visitors may extend this class.
 */
 
class meth_info {
 
    public String ret_type;
    public ArrayList<String> f_args = new ArrayList<String>(0);
    public ArrayList<String> f_type = new ArrayList<String>(0);
    public HashMap<String,String> local_vars = new HashMap<String,String>();

    public void print_func_info()
    {
       System.out.println("The method info is:");       
       System.out.println("Ret type = "+ret_type); 
       
       System.out.println("Formal params:");
       for(int y=0;y<f_args.size();y++)
       {
         System.out.println(f_args.get(y)+" "+f_type.get(y));
       }
             
       System.out.println("local variables: ");       
       System.out.println(local_vars);
       System.out.println("\n");
             
    }
}

class arg_check {

    String func_class;
    String func_name;
    int ind;
}

public class GJDepthFirst<R,A> implements GJVisitor<R,A> {
   //
   // Auto class visitors--probably don't need to be overridden.
  
  public static HashMap<String,String> class_parent = new HashMap<String,String>();
  public static HashMap<String,HashMap<String,String>> class_vars = new HashMap<String,HashMap<String,String>>(); 
  public static HashMap<String,HashMap<String,meth_info>> class_meth = new HashMap<String,HashMap<String,meth_info>>(); 
  
  public static ArrayList<arg_check> arg_check_list = new ArrayList<arg_check>(0);
  
  public void printTables() {
  System.out.println("\n\nThe class_parent table is******************************************************");
  Iterator<Map.Entry<String, String>> itr = class_parent.entrySet().iterator();
   
  Map.Entry<String, String> entry = null;
  while(itr.hasNext()){
      
      entry = itr.next();
      System.out.println( entry.getKey() + "->" + entry.getValue() );
  }
  
  System.out.println("\n\nThe class_vars table is******************************************************");
  for (Map.Entry<String, HashMap<String, String>> entry2 : class_vars.entrySet()) {
        System.out.println(entry2.getKey()+":\n");
        Map<String, String> childMap = entry2.getValue();
        System.out.println(childMap);
    }
   
  System.out.println("\n\nThe class_meth table is******************************************************"); 
  for (Map.Entry<String, HashMap<String, meth_info>> entry3 : class_meth.entrySet()) {
  
        System.out.println(entry3.getKey()+":\n");
        Map<String, meth_info> childMap = entry3.getValue();

        for (Map.Entry<String, meth_info> entry4 : childMap.entrySet()) {
            String childKey = entry4.getKey();
            System.out.println(childKey+":");
            meth_info childValue = entry4.getValue();
            childValue.print_func_info();
        }
        System.out.println();
    }
  
  }
  
  public boolean check_overloading(String fName, String cName) {
  
     String o_class=cName; 
     cName=class_parent.get(cName);
     
     ArrayList<String> visited_class=new ArrayList<String>(0);
     visited_class.add(cName);
     
     while(!cName.equals("1NULL"))
     {
       if(class_meth.containsKey(cName))
       {
         if(class_meth.get(cName).containsKey(fName))
         {
           if(!(class_meth.get(o_class).get(fName).ret_type).equals(class_meth.get(cName).get(fName).ret_type))
            return true;
           else
           {
             int num1=class_meth.get(o_class).get(fName).f_args.size();
             int num2=class_meth.get(cName).get(fName).f_args.size();
             if(num1!=num2)
              return true;
             
             for(int p=0;p<num1;p++)
             {
               if((class_meth.get(o_class).get(fName).f_type.get(p))!=(class_meth.get(cName).get(fName).f_type.get(p)))
                return true;
             }
           }            
           
         }
       }       
       cName=class_parent.get(cName);
       if(visited_class.contains(cName))
       {
         return false;
       }
       else
       {
         visited_class.add(cName); 
       }
     }
  
     return false;
  }  
  
  public String findType(String varName) {
   
     String varType="2NULL";
     boolean debug2=false;
     
     if(is_global)
     {
       if(class_parent.containsKey(varName))
        return varName;
       else
        return varType;
     }
         
     if(debug2)
     {
       System.out.println("not global scope");
     }
          
       if(!in_class)
       {         
         if(debug2)
         {
            System.out.println("in function scope "+curr_class+" "+curr_func);
            class_meth.get(curr_class).get(curr_func).print_func_info();
         }
        
         if( class_meth.get(curr_class).get(curr_func).local_vars.containsKey(varName))
         {
            if(debug2)
            {
               System.out.println("local variable of the func");
            }
          return class_meth.get(curr_class).get(curr_func).local_vars.get(varName);
         }          
         else
         {
           int index=class_meth.get(curr_class).get(curr_func).f_args.indexOf(varName);
           
           if(index!=-1)
           {
             if(debug2)
             {
                System.out.println("formal parameter of the func");
             }
             return class_meth.get(curr_class).get(curr_func).f_type.get(index);
           }
           
           if(debug2)
           {
             System.out.println("not found in func scope");
           }
           
         }
       }
       
        if(debug2)
        {
           System.out.println("searching in class and parent scopes");
        }
        String class_itr=curr_class;
         
         ArrayList<String> visited_class=new ArrayList<String>(0);
         visited_class.add(class_itr);
         
         while(true)
         {
         if(debug)
         {
           System.out.println("in findType func while loop");
         }
         
         if(class_vars.containsKey(class_itr))
         {
          if(class_vars.get(class_itr).containsKey(varName))
          {
            if(debug2)
            {
               System.out.println("class var");
            }
            return class_vars.get(class_itr).get(varName);
          }
          else
          {                  
             String par_class=class_parent.get(class_itr);
             while(!par_class.equals("1NULL")&&!par_class.equals(curr_class))
             {
                if(class_vars.containsKey(par_class))
                {
                 if(class_vars.get(par_class).containsKey(varName))
                 {
                    return class_vars.get(par_class).get(varName);
                 }
                 par_class=class_parent.get(par_class);
                 if(visited_class.contains(par_class))
                 {
                    break;
                 }
                 else
                 {
                   visited_class.add(par_class);
                 }
                }
             }
                          
             break;     
          }
          }
          else
          {
             if(!class_parent.get(class_itr).equals("1NULL"))
             {
                class_itr=class_parent.get(class_itr);
                if(visited_class.contains(class_itr))
                {
                  break;
                }
                else
                {
                   visited_class.add(class_itr);
                }
             }
             else
              break;
          }
          }
          
     return varName;  
  }
  
  boolean debug=false; 
  int flag=0;
  String this_class;
  String this_func;
  
  String curr_class;
  String curr_func;
  int curr_func_arg_n;
  int curr_func_arg_i;
  boolean in_class;
  boolean is_global;
  //int in_class;
  boolean new_type_check;
  
  ArrayList<String> check_func = new ArrayList<String>();
  boolean param_check;
  
  int class_data=1;
  
  HashMap<String,String> empty_table = new HashMap<String,String>(); 
  
  
  public boolean is_Sub_Type(String sub, String par) {
      
      if((!class_parent.containsKey(sub))||(!class_parent.containsKey(par)))
      {
        return false;
      }
      
      ArrayList<String> visited_class=new ArrayList<String>(0);
      visited_class.add(sub);
      while(!sub.equals("1NULL"))
      {
        if(debug)
        {
           System.out.println("in while loop os is_Sub_Type func");
        }
        
        if(sub.equals(par))
         return true;
        else
        {
          sub=class_parent.get(sub);
          if(visited_class.contains(sub))
           return false;
          else
           visited_class.add(sub);
        }
      }
      return false;
   }
   
      public R visit(NodeList n, A argu) {
      R _ret=null;
      int _count=0;
      for ( Enumeration<Node> e = n.elements(); e.hasMoreElements(); ) {
         e.nextElement().accept(this,argu);
         _count++;
      }
      return _ret;
   }

   public R visit(NodeListOptional n, A argu) {
      if ( n.present() ) {
         R _ret=null;
         int _count=0;
         for ( Enumeration<Node> e = n.elements(); e.hasMoreElements(); ) {
            e.nextElement().accept(this,argu);
            _count++;
         }
         return _ret;
      }
      else
         return null;
   }

   public R visit(NodeOptional n, A argu) {
      if ( n.present() )
         return n.node.accept(this,argu);
      else
         return null;
   }

   public R visit(NodeSequence n, A argu) {
      R _ret=null;
      int _count=0;
      for ( Enumeration<Node> e = n.elements(); e.hasMoreElements(); ) {
         e.nextElement().accept(this,argu);
         _count++;
      }
      return _ret;
   }

   public R visit(NodeToken n, A argu) { return (R)n.tokenImage; }

   //
   // User-generated visitor methods below
   //

   /**
    * f0 -> MainClass()
    * f1 -> ( TypeDeclaration() )*
    * f2 -> <EOF>
    */
   public R visit(Goal n, A argu) {
		/* YOUR CODE HERE */
       
      if(debug)
      {
         System.out.println("DFS started at Goal");
      }
      
      R _ret=null;
      
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      
      if(debug)
       printTables();
       
      if(debug)
      {
         System.out.println("DFS ended");
      }
      
      if(debug)
      {
         System.out.println("DFS started second time at goal");
      }
      
      flag=1;
      
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      
      if(debug)
      {
         System.out.println("DFS ended second time at goal");
      }
      
      System.out.println("Program type checked successfully");
      
      return _ret;
   }

   /**
    * f0 -> "class"
    * f1 -> Identifier()
    * f2 -> "{"
    * f3 -> "public"
    * f4 -> "static"
    * f5 -> "void"
    * f6 -> "main"
    * f7 -> "("
    * f8 -> "String"
    * f9 -> "["
    * f10 -> "]"
    * f11 -> Identifier()
    * f12 -> ")"
    * f13 -> "{"
    * f14 -> PrintStatement()
    * f15 -> "}"
    * f16 -> "}"
    */
   public R visit(MainClass n, A argu) {
		/* YOUR CODE HERE */
      
      if(debug)
      {
        System.out.println("in MainClass Node");
      }
      
      if(flag==0)
      {
        R _ret=null;
        n.f0.accept(this, argu);
        String className = (String) n.f1.accept(this, argu);
        class_parent.put(className,"1NULL");  //no parent class
        if(debug)
        {
          System.out.println("in MainClass Node, stored "+className+" in class_parent");
        }
      
        n.f2.accept(this, argu);
        n.f3.accept(this, argu);
        n.f4.accept(this, argu);
        n.f5.accept(this, argu);
        n.f6.accept(this, argu);
        n.f7.accept(this, argu);
        n.f8.accept(this, argu);
        n.f9.accept(this, argu);
        n.f10.accept(this, argu);
        String varName=(String) n.f11.accept(this, argu);
        
        if(debug)
        {
          System.out.println("in MainClass Node, starting to store the main function");
        }
        meth_info new_func=new meth_info();
        new_func.ret_type="void";
        new_func.f_args.add(varName);
        new_func.f_type.add("String[]");
        HashMap<String,meth_info> temp_func = new HashMap<String,meth_info>();
        temp_func.put("main",new_func);
        class_meth.put(className,temp_func);
        if(debug)
        {
          System.out.println("in MainClass Node, done storing the main function");
        }
              
        n.f12.accept(this, argu);
        n.f13.accept(this, argu);  
        n.f14.accept(this, argu);
        n.f15.accept(this, argu);
        n.f16.accept(this, argu);
        return _ret;
      }
      else
      {
        R _ret=null;
        is_global=true;
        n.f0.accept(this, argu);
        curr_class=(String) n.f1.accept(this, argu);
        n.f2.accept(this, argu);
        is_global=false;
        
        n.f3.accept(this, argu);
        n.f4.accept(this, argu);
        n.f5.accept(this, argu);
        n.f6.accept(this, argu);
        curr_func="main";
        in_class=false;
        
        n.f7.accept(this, argu);        
        n.f8.accept(this, argu);
        n.f9.accept(this, argu);
        n.f10.accept(this, argu);
        n.f11.accept(this, argu);
        n.f12.accept(this, argu);
        n.f13.accept(this, argu);        
        n.f14.accept(this, argu);
        n.f15.accept(this, argu); 
        in_class=true;
               
        n.f16.accept(this, argu);
        is_global=true;
        
        return _ret;
      }
   }

   /**
    * f0 -> ClassDeclaration()
    *       | ClassExtendsDeclaration()
    */
   public R visit(TypeDeclaration n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "class"
    * f1 -> Identifier()
    * f2 -> "{"
    * f3 -> ( VarDeclaration() )*
    * f4 -> ( MethodDeclaration() )*
    * f5 -> "}"
    */
   public R visit(ClassDeclaration n, A argu) {
		/* YOUR CODE HERE */
		
    if(debug)
    {
      System.out.println("in ClassDeclaration");
    }
      
    if(flag==0)
    {
      R _ret=null;
      n.f0.accept(this, argu);
      String className = (String) n.f1.accept(this, argu);
      if(class_parent.containsKey(className))
      {
          //ERROR
          System.out.println("Type error");
          if(debug)
          {
             System.out.println("Redifing existsent class: "+className);
          }
          System.exit(1);
      }
      
      if(debug)
      {
        System.out.println("Class name =  " + className + " and has no parent");
      }
      class_parent.put(className,"1NULL");    
      
      n.f2.accept(this, argu);
      this_class=className;
      class_data=1;
        
      n.f3.accept(this, argu);
      class_data=0;
      
      n.f4.accept(this, argu);
      n.f5.accept(this, argu);
      
      return _ret;
    }
    else
    {
      R _ret=null;
      n.f0.accept(this, argu);
      is_global=true;
      
      if(debug)
      {
        System.out.println("starting dfs ar Class dec,"+" is_global= "+is_global);
      }      
      curr_class=(String) n.f1.accept(this, argu);
      in_class=true;
      
      n.f2.accept(this, argu);
      is_global=false;
      
      n.f3.accept(this, argu);      
      n.f4.accept(this, argu);
      n.f5.accept(this, argu);
      is_global=true;
      
      return _ret;
    }
   }

   /**
    * f0 -> "class"
    * f1 -> Identifier()
    * f2 -> "extends"
    * f3 -> Identifier()
    * f4 -> "{"
    * f5 -> ( VarDeclaration() )*
    * f6 -> ( MethodDeclaration() )*
    * f7 -> "}"
    */
   public R visit(ClassExtendsDeclaration n, A argu) {
		/* YOUR CODE HERE */
    if(debug)
    {
      System.out.println("in ClassExtendsDeclaration Node");
    }
    
    if(flag==0)
    {
      R _ret=null;
      n.f0.accept(this, argu);
      String className = (String)n.f1.accept(this, argu);   
      if(class_parent.containsKey(className))
      {
          //ERROR
          System.out.println("Type error");
          if(debug)
          {
             System.out.println("Redifing existsent class: "+className);
          }
          System.exit(1);
      }
      
      n.f2.accept(this, argu);
      String parentName = (String)n.f3.accept(this, argu);
      if(debug)
      {
        System.out.println("Class name =  " + className + "is a subclass of "+parentName);
      }
      class_parent.put(className,parentName);  
      
      n.f4.accept(this, argu);
      this_class=className;
      class_data=1;
      
      n.f5.accept(this, argu);
      class_data=0;
      
      n.f6.accept(this, argu);
      n.f7.accept(this, argu);
      return _ret;
    }
    else
    {
      R _ret=null;
      is_global=true;
      
      n.f0.accept(this, argu);
      curr_class=(String) n.f1.accept(this, argu);
          
      n.f2.accept(this, argu);
      String par_class = (String) n.f3.accept(this, argu);
      if(!class_parent.containsKey(par_class))
      {
        //ERROR
        System.out.println("Type error");
        if(debug)
        {
           System.out.println("Extends from a non-existent parent class");
        }
        System.exit(1);
      }
      
      n.f4.accept(this, argu);
      is_global=false;
      in_class=true;
      
      n.f5.accept(this, argu);
      
      if(debug)
          {
             System.out.println("entering method decl");
          }
      
      n.f6.accept(this, argu);
      n.f7.accept(this, argu);
      is_global=true;
      
      return _ret;
    }
   }

   /**
    * f0 -> Type()
    * f1 -> Identifier()
    * f2 -> ";"
    */
   public R visit(VarDeclaration n, A argu) {
		/* YOUR CODE HERE */
    if(flag==0)
    {
      R _ret=null;
      
      if(debug)
      {
      System.out.println("In Var declaration");
      }
      
      String varType=(String) n.f0.accept(this, argu);
      String varName = (String) n.f1.accept(this, argu);
      if(class_data==1)
      {
      if(!class_vars.containsKey(this_class))
      {
        HashMap<String,String> temp_map=new HashMap<String,String>();
        temp_map.put(varName,varType);
        class_vars.put(this_class,temp_map);
      }
      else
      {
        if(debug)
          {
             System.out.println("in VarDeclarataion");
          }
          
        if(class_vars.get(this_class).containsKey(varName))
        {
          //ERROR
          System.out.println("Type error");
          if(debug)
          {
             System.out.println("Redifing class variable with same name in same class: "+this_class);
          }
          System.exit(1);
        }
        
        class_vars.get(this_class).put(varName,varType);
      }
      }
      else
      {
        class_meth.get(this_class).get(this_func).local_vars.put(varName,varType);
      }
            
      n.f2.accept(this, argu);
      return _ret;
    }
    else
    {
      R _ret=null;
      String ID_type=(String) n.f0.accept(this, argu);
      if(ID_type.equals("int")||ID_type.equals("int[]")||ID_type.equals("boolean"))
      {
        //do nothing, valid type
      }
      else
      {
        //check if it a valid class
        if(!class_parent.containsKey(ID_type))
        {
          //ERROR
          System.out.println("Type error");
          if(debug)
          {
             System.out.println("Type of id is a non-existent class");
          }
          System.exit(1);
        }
      }
      
      n.f1.accept(this, argu);     
      n.f2.accept(this, argu);
      return _ret;
    }
   }

   /**
    * f0 -> "public"
    * f1 -> Type()
    * f2 -> Identifier()
    * f3 -> "("
    * f4 -> ( FormalParameterList() )?
    * f5 -> ")"
    * f6 -> "{"
    * f7 -> ( VarDeclaration() )*
    * f8 -> ( Statement() )*
    * f9 -> "return"
    * f10 -> Expression()
    * f11 -> ";"
    * f12 -> "}"
    */
   public R visit(MethodDeclaration n, A argu) {
		/* YOUR CODE HERE */
    if(flag==0)
    {
      if(debug)
      {
      System.out.println("In method declaration");
      }
      
      R _ret=null;
      n.f0.accept(this, argu);
      meth_info new_func2=new meth_info();
      new_func2.ret_type = (String) n.f1.accept(this, argu);
      String funcName = (String) n.f2.accept(this, argu);
      
      if(!class_meth.containsKey(this_class))
      {
        if(debug)
        {
        System.out.println(this_class+" not found in class_meth hashmap\n");
        }
        
        HashMap<String,meth_info> temp_func = new HashMap<String,meth_info>();
        temp_func.put(funcName,new_func2);
        class_meth.put(this_class,temp_func);  
        //printClassMeth();
      }   
      else
      {                  
        if(class_meth.get(this_class).containsKey(funcName))
        {
          //ERROR
          System.out.println("Type error");
          if(debug)
          {
             System.out.println("Redefining function with same name in the same class: "+this_class+" func name: "+funcName);
          }
          System.exit(1);
        }
        
        class_meth.get(this_class).put(funcName,new_func2);
        //printClassMeth();
      } 
            
      n.f3.accept(this, argu);
      this_func=funcName;
      if(debug)
      {
         System.out.println("entering formal param list");
      }
      
      n.f4.accept(this, argu);
      
          
      n.f5.accept(this, argu);
      n.f6.accept(this, argu);
      //set local variables
      class_data=0;
      
      n.f7.accept(this, argu);
      n.f8.accept(this, argu);
      n.f9.accept(this, argu);
      n.f10.accept(this, argu);
      n.f11.accept(this, argu);
      n.f12.accept(this, argu);
      return _ret;
    }
    else
    {
      R _ret=null;
      n.f0.accept(this, argu);
      String retType=(String) n.f1.accept(this, argu);
      String func_name=(String) n.f2.accept(this, argu);  
      in_class=false;
      curr_func=func_name;
          
      if(check_overloading(curr_func,curr_class))
      {
         //ERROR
         System.out.println("Type error");
         if(debug)
         {
            System.out.println("Function overloading: "+curr_func);
         }
         System.exit(1);
      }
          
      n.f3.accept(this, argu);   
      if(debug)
          {
             System.out.println("entering formalparamlist");
          }
             
      n.f4.accept(this, argu);
      if(debug)
      {
         System.out.println("returned from formal param list");
      }
          
      n.f5.accept(this, argu);
      n.f6.accept(this, argu);      
      n.f7.accept(this, argu);
      n.f8.accept(this, argu);
      n.f9.accept(this, argu);
      String retVal=(String) n.f10.accept(this, argu);
      if(!retType.equals(retVal))   
      {
          //ERROR
          System.out.println("Type error");
          if(debug)
          {
             System.out.println("Ret type and ret value of func "+curr_func+" not of same type");
          }
          System.exit(1);
      }
      
      n.f11.accept(this, argu);
      n.f12.accept(this, argu);
      in_class=true;
      
      return _ret;
    }
   }

   /**
    * f0 -> FormalParameter()
    * f1 -> ( FormalParameterRest() )*
    */
   public R visit(FormalParameterList n, A argu) {
		/* YOUR CODE HERE */
    if(flag==0)
    {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      return _ret;
    }
    else
    {
      if(debug)
      {
        System.out.println("in FormalParameterList");
      }
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      return _ret;
    }
   }

   /**
    * f0 -> Type()
    * f1 -> Identifier()
    */
   public R visit(FormalParameter n, A argu) {
		/* YOUR CODE HERE */

      R _ret=null;
      
      if(flag==0)
      {
	      String param_type=(String) n.f0.accept(this, argu);
	      String param_name=(String) n.f1.accept(this, argu);
	      
	      (((class_meth.get(this_class)).get(this_func)).f_args).add(param_name);
	      (((class_meth.get(this_class)).get(this_func)).f_type).add(param_type);
	      	      
	      //printTables();
      }
      else
      {
              String typeName=(String) n.f0.accept(this, argu);
              if(typeName.equals("int[]")||typeName.equals("int")||typeName.equals("boolean"))
              {
                //do nothing
              }
              else
              {
                if(!class_parent.containsKey(typeName))
                {
                  //ERROR
        	  System.out.println("Type error");
       		  if(debug)
        	  {
        	     System.out.println("Formal parameter of func "+curr_func+" not of valid class type");
        	  }
        	  System.exit(1); 
                }
              }
              
	      n.f1.accept(this, argu);
      }
      
      return _ret;
   }

   /**
    * f0 -> ","
    * f1 -> FormalParameter()
    */
   public R visit(FormalParameterRest n, A argu) {
		/* YOUR CODE HERE */

      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> ArrayType()
    *       | BooleanType()
    *       | IntegerType()
    *       | Identifier()
    */
   public R visit(Type n, A argu) {
		/* YOUR CODE HERE */
    if(flag==0)
    {
      R _ret=null;
      _ret=n.f0.accept(this, argu);
      return _ret;
    }
    else
    {
      R _ret=null;
      _ret=n.f0.accept(this, argu);
      return _ret;
    }
   }

   /**
    * f0 -> "int"
    * f1 -> "["
    * f2 -> "]"
    */
   public R visit(ArrayType n, A argu) {
		/* YOUR CODE HERE */

      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      
      if(flag==0)
      {
      _ret=(R)"int[]";
      }
      else
      {
      _ret=(R)"int[]";
      }
      
      return _ret;
   }

   /**
    * f0 -> "boolean"
    */
   public R visit(BooleanType n, A argu) {
		/* YOUR CODE HERE */

      R _ret=null;
      
      if(flag==0)
      {
        _ret=n.f0.accept(this, argu);
      }
      else
      {
        _ret=n.f0.accept(this, argu);
      }
      
      return _ret;
   }

   /**
    * f0 -> "int"
    */
   public R visit(IntegerType n, A argu) {
		/* YOUR CODE HERE */

      R _ret=null;
      
      if(flag==0)
      {
        _ret=n.f0.accept(this, argu);
      }
      else
      {
        _ret=n.f0.accept(this, argu);
      }     
      
      return _ret;
   }

   /**
    * f0 -> Block()
    *       | AssignmentStatement()
    *       | ArrayAssignmentStatement()
    *       | IfStatement()
    *       | WhileStatement()
    *       | PrintStatement()
    */
   public R visit(Statement n, A argu) {
   
      R _ret=null;
      if(flag==0)
      {
        n.f0.accept(this, argu);
      }
      else
      {
        n.f0.accept(this, argu);
      }
      return _ret;
   }

   /**
    * f0 -> "{"
    * f1 -> ( Statement() )*
    * f2 -> "}"
    */
   public R visit(Block n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> Identifier()
    * f1 -> "="
    * f2 -> Expression()
    * f3 -> ";"
    */
   public R visit(AssignmentStatement n, A argu) {
		/* YOUR CODE HERE */

      R _ret=null;
      
      if(flag==0)
      {
              n.f0.accept(this, argu);
	      n.f1.accept(this, argu);
	      n.f2.accept(this, argu);
	      n.f3.accept(this, argu);	      
      }
      else
      {
	      String T1=(String) n.f0.accept(this, argu);
	      n.f1.accept(this, argu);
	      String T2=(String) n.f2.accept(this, argu);
	      n.f3.accept(this, argu);
	      
	      if(T1.equals(T2))
	      {
		_ret=(R) T1;
	      }
	      else
	      {
		 if(class_parent.containsKey(T1)&&class_parent.containsKey(T2))   //Exp <= ID
		 {
		   if(is_Sub_Type(T2,T1))
		   {
		     _ret=(R) T1;
		   }
		   else
		   {
		      //ERROR
		      System.out.println("Type error");
		      if(debug)
		      {
		        System.out.println(T2+" not a sub type of "+T1);
		      }
		      System.exit(1);
		   }
		 }
		 else
		 {
		    //ERROR
		    System.out.println("Type error");
                    if(debug)
		    {
		      System.out.println(T1+" or "+T2+" does not exist");
		    }
		    System.exit(1);
		 }
	      }
      }
      
      return _ret;
   }

   /**
    * f0 -> Identifier()
    * f1 -> "["
    * f2 -> Expression()
    * f3 -> "]"
    * f4 -> "="
    * f5 -> Expression()
    * f6 -> ";"
    */
   public R visit(ArrayAssignmentStatement n, A argu) {
		/* YOUR CODE HERE */
      R _ret=null;
      if(flag==0)
      {
	      n.f0.accept(this, argu);
	      n.f1.accept(this, argu);
	      n.f2.accept(this, argu);
	      n.f3.accept(this, argu);
	      n.f4.accept(this, argu);
	      n.f5.accept(this, argu);
	      n.f6.accept(this, argu);
      }
      else
      {
              
	      String T1=(String) n.f0.accept(this, argu);
	      n.f1.accept(this, argu);
	      String T2=(String) n.f2.accept(this, argu);
	      n.f3.accept(this, argu);
	      n.f4.accept(this, argu);
	      String T3=(String) n.f5.accept(this, argu);
	      n.f6.accept(this, argu);
	      
	      if(T1.equals("int[]")&&T2.equals("int")&&T3.equals("int"))
	      {
	         _ret=(R) "int";
	      }
	      else
	      {
	         //ERROR
                 System.out.println("Type error");
                 if(debug)
                 {
                   System.out.println("non int assigned to element of int array");
                 }
                 System.exit(1);
	      }
      }
      return _ret;
   }

   /**
    * f0 -> IfthenElseStatement()
    *       | IfthenStatement()
    */
   public R visit(IfStatement n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "if"
    * f1 -> "("
    * f2 -> Expression()
    * f3 -> ")"
    * f4 -> Statement()
    */
   public R visit(IfthenStatement n, A argu) {
		/* YOUR CODE HERE */

      R _ret=null;
      
      if(flag==0)
      {
	      n.f0.accept(this, argu);
	      n.f1.accept(this, argu);
	      n.f2.accept(this, argu);
	      n.f3.accept(this, argu);
	      n.f4.accept(this, argu);
      }
      else
      {
              n.f0.accept(this, argu);
	      n.f1.accept(this, argu);
	      String T1=(String) n.f2.accept(this, argu);
	      if(T1.equals("boolean"))
	      {
		 //valid type
	      }
	      else
	      {
		 //ERROR
		 System.out.println("Type error");
		 if(debug)
                 {
                   System.out.println("if check not of bool type");
                 }
		 System.exit(1);
	      }     
	      
	      n.f3.accept(this, argu);
	      n.f4.accept(this, argu);
      }
      return _ret;
   }

   /**
    * f0 -> "if"
    * f1 -> "("
    * f2 -> Expression()
    * f3 -> ")"
    * f4 -> Statement()
    * f5 -> "else"
    * f6 -> Statement()
    */
   public R visit(IfthenElseStatement n, A argu) {
		/* YOUR CODE HERE */

      R _ret=null;
      
      if(flag==0)
      {
	      n.f0.accept(this, argu);
	      n.f1.accept(this, argu);
	      n.f2.accept(this, argu);
	      n.f3.accept(this, argu);
	      n.f4.accept(this, argu);
	      n.f5.accept(this, argu);
	      n.f6.accept(this, argu);
      }
      else
      {
              n.f0.accept(this, argu);
	      n.f1.accept(this, argu);
	      String T1=(String) n.f2.accept(this, argu);
	      if(T1.equals("boolean"))
	      {
		 //valid type
	      }
	      else
	      {
		 //ERROR
		 System.out.println("Type error");
		 if(debug)
                 {
                   System.out.println("if check not of bool type in if else");
                 }
		 System.exit(1);
	      }   
	      
	      n.f3.accept(this, argu);
	      n.f4.accept(this, argu);
	      n.f5.accept(this, argu);
	      n.f6.accept(this, argu);
      }
      return _ret;
   }

   /**
    * f0 -> "while"
    * f1 -> "("
    * f2 -> Expression()
    * f3 -> ")"
    * f4 -> Statement()
    */
   public R visit(WhileStatement n, A argu) {
		/* YOUR CODE HERE */

      R _ret=null;
      if(flag==0)
      {
	      n.f0.accept(this, argu);
	      n.f1.accept(this, argu);     
	      n.f2.accept(this, argu);
	      n.f3.accept(this, argu);
	      n.f4.accept(this, argu);
      }
      else
      {
              n.f0.accept(this, argu);
	      n.f1.accept(this, argu);      
	      String T1=(String) n.f2.accept(this, argu);
	      if(T1.equals("boolean"))
	      {
		 //valid type
	      }
	      else
	      {
		 //ERROR
		 System.out.println("Type error");
		 if(debug)
                 {
                   System.out.println("while check not of bool type");
                 }
		 System.exit(1);
	      }   
	      
	      n.f3.accept(this, argu);
	      n.f4.accept(this, argu);
      }
      return _ret;
   }

   /**
    * f0 -> "System.out.println"
    * f1 -> "("
    * f2 -> Expression()
    * f3 -> ")"
    * f4 -> ";"
    */
   public R visit(PrintStatement n, A argu) {
		/* YOUR CODE HERE */

      R _ret=null;
      if(flag==0)
      {
        n.f0.accept(this, argu);
        n.f1.accept(this, argu);
        n.f2.accept(this, argu);
        n.f3.accept(this, argu);
        n.f4.accept(this, argu);
      }
      else
      {
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      String T1=(String) n.f2.accept(this, argu);
      
      if(T1.equals("int"))
      {
         //Type matches
      }
      else
      {
         //ERROR
         System.out.println("Type error");
         if(debug)
         {
            System.out.println("print of non int expression");
         }
         System.exit(1);
      }   
      
      n.f3.accept(this, argu);
      n.f4.accept(this, argu);
      }
      return _ret;
   }

   /**
    * f0 -> OrExpression()
    *       | AndExpression()
    *       | CompareExpression()
    *       | neqExpression()
    *       | PlusExpression()
    *       | MinusExpression()
    *       | TimesExpression()
    *       | DivExpression()
    *       | ArrayLookup()
    *       | ArrayLength()
    *       | MessageSend()
    *       | PrimaryExpression()
    */
   public R visit(Expression n, A argu) {
		/* YOUR CODE HERE */
      R _ret=null;
      if(flag==0)
      {
	      
	      n.f0.accept(this, argu);
	      return _ret;
      }
      else
      {
	      _ret = n.f0.accept(this, argu);	      
	      return _ret;
      }
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "&&"
    * f2 -> PrimaryExpression()
    */
   public R visit(AndExpression n, A argu) {
		/* YOUR CODE HERE */

      R _ret=null;
      
      if(flag==0)
      {
              n.f0.accept(this, argu);
	      n.f1.accept(this, argu);
	      n.f2.accept(this, argu);
      }
      else
      {
	      String T1=(String) n.f0.accept(this, argu);
	      n.f1.accept(this, argu);
	      String T2=(String) n.f2.accept(this, argu);
	      
	      if(T1.equals("boolean")&&T2.equals("boolean"))
	      {
		 _ret=(R) "boolean";
	      }
	      else
	      {
		 //ERROR
		 System.out.println("Type error");
		 if(debug)
		 {
		    System.out.println("non bool type ops for AND expr");
		 }
		 System.exit(1);
	      }
      }
      return _ret;
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "||"
    * f2 -> PrimaryExpression()
    */
   public R visit(OrExpression n, A argu) {
		/* YOUR CODE HERE */

      R _ret=null;
      
      if(flag==0)
      {
              n.f0.accept(this, argu);
	      n.f1.accept(this, argu);
	      n.f2.accept(this, argu);
      }
      else
      {
      String T1=(String) n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      String T2=(String) n.f2.accept(this, argu);
      
      if(T1.equals("boolean")&&T2.equals("boolean"))
      {
         _ret=(R) "boolean";
      }
      else
      {
         //ERROR
         System.out.println("Type error");
         if(debug)
         {
            System.out.println("non bool type ops for OR expr");
         }
         System.exit(1);
      }
      }
      
      return _ret;
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "<="
    * f2 -> PrimaryExpression()
    */
   public R visit(CompareExpression n, A argu) {
		/* YOUR CODE HERE */

      R _ret=null;
      
      if(flag==0)
      {
              n.f0.accept(this, argu);
	      n.f1.accept(this, argu);
	      n.f2.accept(this, argu);
      }
      else
      {
      String T1=(String) n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      String T2=(String) n.f2.accept(this, argu);
      
      if(T1.equals("int")&&T2.equals("int"))
      {
         _ret=(R) "boolean";
      }
      else
      {
         //ERROR
         System.out.println("Type error");
         if(debug)
         {
            System.out.println("non int type ops for <= expr");
         }
         System.exit(1);
      }
      }
      
      return _ret;
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "!="
    * f2 -> PrimaryExpression()
    */
   public R visit(neqExpression n, A argu) {
		/* YOUR CODE HERE */

      R _ret=null;
      
      if(flag==0)
      {
              n.f0.accept(this, argu);
	      n.f1.accept(this, argu);
	      n.f2.accept(this, argu);
      }
      else
      {
      String T1=(String) n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      String T2=(String) n.f2.accept(this, argu);
      
      if(T1.equals("int")&&T2.equals("int"))
      {
         _ret=(R) "boolean";
      }
      else
      {
         //ERROR
         System.out.println("Type error");
         if(debug)
         {
            System.out.println("non int type ops for != expr");
         }
         System.exit(1);
      }
      }
      
      return _ret;
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "+"
    * f2 -> PrimaryExpression()
    */
   public R visit(PlusExpression n, A argu) {
		/* YOUR CODE HERE */

      R _ret=null;
      
      if(flag==0)
      {
              n.f0.accept(this, argu);
	      n.f1.accept(this, argu);
	      n.f2.accept(this, argu);
      }
      else
      {
      String T1=(String) n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      String T2=(String) n.f2.accept(this, argu);
      
      if(T1.equals("int")&&T2.equals("int"))
      {
         _ret=(R) "int";
      }
      else
      {
         //ERROR
         System.out.println("Type error");
         if(debug)
         {
            System.out.println("non int type ops for + expr");
         }
         System.exit(1);
      }
      }
      
      return _ret;
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "-"
    * f2 -> PrimaryExpression()
    */
   public R visit(MinusExpression n, A argu) {
		/* YOUR CODE HERE */

      R _ret=null;
      
      if(flag==0)
      {
              n.f0.accept(this, argu);
	      n.f1.accept(this, argu);
	      n.f2.accept(this, argu);
      }
      else
      {
      String T1=(String) n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      String T2=(String) n.f2.accept(this, argu);
      
      if(T1.equals("int")&&T2.equals("int"))
      {
         _ret=(R) "int";
      }
      else
      {
         //ERROR
         System.out.println("Type error");
         if(debug)
         {
            System.out.println("non int type ops for - expr");
         }
         System.exit(1);
      }
      }
      
      return _ret;
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "*"
    * f2 -> PrimaryExpression()
    */
   public R visit(TimesExpression n, A argu) {
		/* YOUR CODE HERE */

      R _ret=null;
      
      if(flag==0)
      {
              n.f0.accept(this, argu);
	      n.f1.accept(this, argu);
	      n.f2.accept(this, argu);
      }
      else
      {
      String T1=(String) n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      String T2=(String) n.f2.accept(this, argu);
      
      if(T1.equals("int")&&T2.equals("int"))
      {
         _ret=(R) "int";
      }
      else
      {
         //ERROR
         System.out.println("Type error");
         if(debug)
         {
            System.out.println("non int type ops for * expr");
         }
         System.exit(1);
      }
      }
      
      return _ret;
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "/"
    * f2 -> PrimaryExpression()
    */
   public R visit(DivExpression n, A argu) {
		/* YOUR CODE HERE */

      R _ret=null;
      
      if(flag==0)
      {
              n.f0.accept(this, argu);
	      n.f1.accept(this, argu);
	      n.f2.accept(this, argu);
      }
      else
      {
      String T1=(String) n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      String T2=(String) n.f2.accept(this, argu);
      
      if(T1.equals("int")&&T2.equals("int"))
      {
         _ret=(R) "int";
      }
      else
      {
         //ERROR
         System.out.println("Type error");
         if(debug)
         {
            System.out.println("non int type ops for / expr");
         }
         System.exit(1);
      }
      }
      
      return _ret;
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "["
    * f2 -> PrimaryExpression()
    * f3 -> "]"
    */
   public R visit(ArrayLookup n, A argu) {
		/* YOUR CODE HERE */

      R _ret=null;
      
      if(flag==0)
      {
              n.f0.accept(this, argu);
	      n.f1.accept(this, argu);
	      n.f2.accept(this, argu);
      }
      else
      {
      String T1=(String) n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      String T2=(String) n.f2.accept(this, argu);
      n.f3.accept(this, argu);
      
      if(T1.equals("int[]")&&T2.equals("int"))
      {
        _ret=(R) "int";
      }
      else
      {
        //ERROR
        System.out.println("Type error");
        if(debug)
         {
            System.out.println("error in p_exp[p_exp]");
         }
        System.exit(1);
      }
      }
      
      return _ret;
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "."
    * f2 -> "length"
    */
   public R visit(ArrayLength n, A argu) {
		/* YOUR CODE HERE */

      R _ret=null;
      
      if(flag==0)
      {
              n.f0.accept(this, argu);
	      n.f1.accept(this, argu);
	      n.f2.accept(this, argu);
      }
      else
      {
      String T1=(String) n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      if(T1.equals("int[]"))
      {
        _ret=(R) "int";
      }
      else
      {
        //ERROR
        System.out.println("Type error");
        if(debug)
        {
          System.out.println("p_exp not of int[] type in p_exp.length");
        }
        System.exit(1);
      }
      }
      
      return _ret;
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "."
    * f2 -> Identifier()
    * f3 -> "("
    * f4 -> ( ExpressionList() )?
    * f5 -> ")"
    */
   public R visit(MessageSend n, A argu) {
		/* YOUR CODE HERE */

      R _ret=null; 
      if(flag==0)
      {
	      n.f0.accept(this, argu);
	      n.f1.accept(this, argu);
	      n.f2.accept(this, argu);
	      n.f3.accept(this, argu);
	      n.f4.accept(this, argu);
	      n.f5.accept(this, argu);
      }
      else       
      { 
      	      String objectType=(String) n.f0.accept(this, argu);
	      n.f1.accept(this, argu);
	      String fName=(String) n.f2.accept(this, argu);
	      String objectType2=objectType;
	      
	      ArrayList<String> visited_class=new ArrayList<String>(0);
	      visited_class.add(objectType2);
	      while(true)
	      {
      	      if(class_meth.containsKey(objectType2))
      	      {  
      	         if(!(class_meth.get(objectType2).containsKey(fName)))   
      	         {
      	          	if(!class_parent.get(objectType2).equals("1NULL"))
      	          	{
      	          	  if(debug)
			  {
			     System.out.println("func not found in class "+objectType2+" searching in parent class");
			  }
			  
      	          	  objectType2=class_parent.get(objectType2);
      	          	  if(visited_class.contains(objectType2))
      	          	  {
      	          	        //recursive inheritance checking
      	          	        //ERROR
			        System.out.println("Type error");
       				if(debug)
				{
				  System.out.println(objectType+" recursive inheritance, so stopped checking in parents");
				}
				System.exit(1); 
      	          	  }
      	          	  else
      	          	  {
      	          	     visited_class.add(objectType2);
      	          	  }
      	          	  
      	          	}
      	          	else
      	          	{
      	                 	//ERROR
			        System.out.println("Type error");
       				if(debug)
				{
				  System.out.println(objectType+" is not a valid classname 2");
				}
				System.exit(1);      	          	  
      	          	}
      	         }
      	         else
      	         {
      	            _ret=(R) class_meth.get(objectType2).get(fName).ret_type; 
      	            break;     	            
      	         }
      	      }
      	      else
      	      { 
      	         if(!class_parent.containsKey(objectType2))
      	         {
      	           		//ERROR
			        System.out.println("Type error");
       				if(debug)
				{
				  System.out.println("primary exp.id(): primary exp is not a valid class");
				}
				System.exit(1);
      	         }
      	               
      	               if(!class_parent.get(objectType2).equals("1NULL"))
      	               {
      	                  objectType2=class_parent.get(objectType2);
      	                  if(visited_class.contains(objectType2))
      	          	  {
      	          	        //recursive inheritance checking
      	          	        //ERROR
			        System.out.println("Type error");
       				if(debug)
				{
				  System.out.println(objectType+" recursive inheritance, so stopped checking in parents");
				}
				System.exit(1); 
      	          	  }
      	          	  else
      	          	  {
      	          	    visited_class.add(objectType2);
      	          	  }
      	                  
      	               }
      	               else
      	               {
		      	//ERROR
			System.out.println("Type error");
			if(debug)
			{
			  System.out.println(objectType+" is not a valid classname 3");
			}
			System.exit(1);
			}
      	      } 
      	      }    	          	      
	      
	      n.f3.accept(this, argu);
	      
	      arg_check new_check = new arg_check();
	      new_check.func_class=objectType2;
	      new_check.func_name=fName;
	      new_check.ind=0;
	      
	      arg_check_list.add(new_check);
	      if(debug)
	      {
		System.out.println("added arg_check_list top");
	      }
	      
	      n.f4.accept(this, argu);
	      if(debug)
	      {
		System.out.println("back to messagesend");
	      }
	      n.f5.accept(this, argu);
	      
	      int l_index=arg_check_list.size()-1;
	      String temp_C=arg_check_list.get(l_index).func_class;
	      String temp_F=arg_check_list.get(l_index).func_name;
	      int temp_N=arg_check_list.get(l_index).ind;
	      int temp_N2=class_meth.get(temp_C).get(temp_F).f_args.size();
	      
	      if(temp_N!=temp_N2)
	      {
	        	//ERROR
			System.out.println("Type error");
			if(debug)
			{
			  System.out.println("less parameters in function call than in def for func "+temp_F+" of class "+temp_C);
			}
			System.exit(1);
	      }
	      
	      arg_check_list.remove(l_index);
	      if(debug)
	      {
		System.out.println("removed arg_check_list top");
	      }
	      	      
      }
      return _ret;
   }

   /**
    * f0 -> Expression()
    * f1 -> ( ExpressionRest() )*
    */
   public R visit(ExpressionList n, A argu) {
		/* YOUR CODE HERE */
		
      R _ret=null;
      if(flag==0)
      {
          n.f0.accept(this, argu);
          n.f1.accept(this, argu);
      }
      else
      {
              _ret=n.f0.accept(this, argu);
              if(arg_check_list.size()>0)
	      {
	        int l_ind=arg_check_list.size()-1;
	        String check_class=arg_check_list.get(l_ind).func_class;
	        String check_func=arg_check_list.get(l_ind).func_name;
	        int check_index=arg_check_list.get(l_ind).ind;
	        
	        if(check_index>=class_meth.get(check_class).get(check_func).f_args.size())
	        {
	          //ERROR
		  System.out.println("Type error"); 
  		  if(debug)
		  {
		    System.out.println("more parameters (check_index= "+check_index+") in call than in definition for "+check_func+" in class "+check_class);
		  }
		  System.exit(1);
	        }
	        
	        if(!(class_meth.get(check_class).get(check_func).f_type.get(check_index).equals((String) _ret)))
	        {
	          if(!is_Sub_Type(((String) _ret),class_meth.get(check_class).get(check_func).f_type.get(check_index)))
	          {
	             //ERROR
		     System.out.println("Type error"); 
     		     if(debug)
		     {
		        System.out.println("parameter "+check_index+" does not match in func call to "+check_func+" in class "+check_class);
		     }
		     System.exit(1);
		  }
		  else
		  {
		     if(debug)
                     {
		         System.out.println("checked param index (is a subtype) "+check_index+" in "+check_func+" in class "+check_class+ " param types "+(String) _ret+" , "+class_meth.get(check_class).get(check_func).f_type.get(check_index));
		     }
	             arg_check_list.get(l_ind).ind++;
		  }
	        }
	        else
	        {
	          if(debug)
		  {
		    System.out.println("checked param index "+check_index+" in "+check_func+" in class "+check_class+ " param types "+(String) _ret+" , "+class_meth.get(check_class).get(check_func).f_type.get(check_index));
		  }
	          arg_check_list.get(l_ind).ind++;
	        }
	      }
	      n.f1.accept(this, argu);
      }
      return _ret;
   }

   /**
    * f0 -> ","
    * f1 -> Expression()
    */
   public R visit(ExpressionRest n, A argu) {
		/* YOUR CODE HERE */

      R _ret=null;
      if(flag==0)
      {
        n.f0.accept(this, argu);
        n.f1.accept(this, argu);
      }
      else
      {
              n.f0.accept(this, argu);
              _ret=n.f1.accept(this, argu);
              if(arg_check_list.size()>0)
	      {
	        int l_ind=arg_check_list.size()-1;
	        String check_class=arg_check_list.get(l_ind).func_class;
	        String check_func=arg_check_list.get(l_ind).func_name;
	        int check_index=arg_check_list.get(l_ind).ind;
	        
	        if(check_index>=class_meth.get(check_class).get(check_func).f_args.size())
	        {
	          //ERROR
		  System.out.println("Type error"); 
  		  if(debug)
		  {
		    System.out.println("more parameters (check_index= "+check_index+") in call than in definition for "+check_func+" in class "+check_class);
		  }
		  System.exit(1);
	        }
	        
	        if(!(class_meth.get(check_class).get(check_func).f_type.get(check_index).equals((String) _ret)))
	        {
	          //ERROR
		  System.out.println("Type error"); 
  		  if(debug)
		  {
		    System.out.println("parameter "+check_index+" does not match in func call to "+check_func+" in class "+check_class);
		  }
		  System.exit(1);
	        }
	        else
	        {
	          if(debug)
		  {
		    System.out.println("checked param index "+check_index+" in "+check_func+" in class "+check_class+ " param types "+(String) _ret+" , "+class_meth.get(check_class).get(check_func).f_type.get(check_index));
		  }
	          arg_check_list.get(l_ind).ind++;
	        }
	      }
      }
      
      return _ret;
   }

   /**
    * f0 -> IntegerLiteral()
    *       | TrueLiteral()
    *       | FalseLiteral()
    *       | Identifier()
    *       | ThisExpression()
    *       | ArrayAllocationExpression()
    *       | AllocationExpression()
    *       | NotExpression()
    *       | BracketExpression()
    */
   public R visit(PrimaryExpression n, A argu) {
		/* YOUR CODE HERE */
      R _ret=null;
      if(flag==0)
      {
        
        n.f0.accept(this, argu);        
      }
      else
      {
        _ret= n.f0.accept(this, argu);        
      }
      return _ret;
   }

   /**
    * f0 -> <INTEGER_LITERAL>
    */
   public R visit(IntegerLiteral n, A argu) {
		/* YOUR CODE HERE */

      R _ret=null;
      if(flag==0)
      {
        n.f0.accept(this, argu);
      }
      else
      {
        n.f0.accept(this, argu);
        _ret=(R) "int";
      }
      return _ret;
   }

   /**
    * f0 -> "true"
    */
   public R visit(TrueLiteral n, A argu) {
		/* YOUR CODE HERE */

      R _ret=null;
      
      if(flag==0)
      {
        n.f0.accept(this, argu);
      }
      else
      {
        n.f0.accept(this, argu);
        _ret=(R) "boolean";
      }
             
      return _ret;
   }

   /**
    * f0 -> "false"
    */
   public R visit(FalseLiteral n, A argu) {
		/* YOUR CODE HERE */
      
      R _ret=null;
      
      if(flag==0)
      {
        n.f0.accept(this, argu);
      }
      else
      {
        n.f0.accept(this, argu);
        _ret=(R) "boolean";
      }
      
      return _ret;
   }

   /**
    * f0 -> <IDENTIFIER>
    */
   public R visit(Identifier n, A argu) {
		/* YOUR CODE HERE */

      R _ret=null; 
      if(flag==0)  
      {
        _ret = n.f0.accept(this, argu);
      }
      else    
      {
        if(debug)
        {
           System.out.println("in Identifier");
        }
        String varName = (String) n.f0.accept(this, argu);   //pass the type of the ID
        if(new_type_check)
        {
          _ret=(R) varName;
          return _ret;
        }
        if(debug)
        {
         System.out.println("finding type of variable "+varName+" is_global= "+is_global);
        }
        String varType= findType(varName);
        if(debug)
        {
         System.out.println("type of variable "+varName+" is "+varType);
        }        
        if(varType.equals("2NULL"))
        {
          //ERROR
          System.out.println("Type error");
          if(debug)
          {
          System.out.println("Undefined variable "+varName);
          }
          System.exit(1);
        }
        _ret=(R) varType;                
      }
      
      if(debug)
      {
         System.out.println("leaving Identifier node");
      }
      return _ret;
   }

   /**
    * f0 -> "this"
    */
   public R visit(ThisExpression n, A argu) {
		/* YOUR CODE HERE */
      
      R _ret=null;
      if(flag==0)
      {
        n.f0.accept(this, argu);
      }
      else
      {
        n.f0.accept(this, argu);
        _ret=(R) curr_class;
        if(debug)
        {
          System.out.println("this set to type "+curr_class);
        }
      }
      return _ret;
   }

   /**
    * f0 -> "new"
    * f1 -> "int"
    * f2 -> "["
    * f3 -> Expression()
    * f4 -> "]"
    */
   public R visit(ArrayAllocationExpression n, A argu) {
		/* YOUR CODE HERE */
      
      
      R _ret=null;
      if(flag==0)
      {
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      n.f3.accept(this, argu);
      n.f4.accept(this, argu);
      }
      else
      {
        n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      String T1=(String) n.f3.accept(this, argu);
      n.f4.accept(this, argu);
      if(T1.equals("int"))
      {
        _ret=(R) "int[]";
      }
      else
      {
        //ERROR
        System.out.println("Type error"); 
        System.exit(1);
      }
      
      }
      return _ret;
   }

   /**
    * f0 -> "new"
    * f1 -> Identifier()
    * f2 -> "("
    * f3 -> ")"
    */
   public R visit(AllocationExpression n, A argu) {
		/* YOUR CODE HERE */
  
      R _ret=null;     
      if(flag==0)
      {
	      n.f0.accept(this, argu);
	      n.f1.accept(this, argu);
	      n.f2.accept(this, argu);
	      n.f3.accept(this, argu);
      }
      else  
      {
              n.f0.accept(this, argu);
              new_type_check=true;
              String class_inst=(String) n.f1.accept(this, argu);
              new_type_check=false;
	      if(!class_parent.containsKey(class_inst))
	      {
	         //ERROR
 	         System.out.println("Type error"); 
        	 System.exit(1);	        
	      }	
	      else
	      {  
	        _ret=(R) class_inst;
	      }
	            
	      n.f2.accept(this, argu);
	      n.f3.accept(this, argu);
      }
      return _ret;
   }

   /**
    * f0 -> "!"
    * f1 -> Expression()
    */
   public R visit(NotExpression n, A argu) {
		/* YOUR CODE HERE */

      R _ret=null;
      if(flag==0)
      {
        n.f0.accept(this, argu);
        n.f1.accept(this, argu);
      }
      else
      {
        n.f0.accept(this, argu);
        String T1=(String) n.f1.accept(this, argu);
        if(T1.equals("boolean"))
        {
          _ret=(R) "boolean";
        }
        else
        {
          //ERROR
          System.out.println("Type error"); 
          System.exit(1);
        }
      }
      return _ret;
   }

   /**
    * f0 -> "("
    * f1 -> Expression()
    * f2 -> ")"
    */
   public R visit(BracketExpression n, A argu) {
		/* YOUR CODE HERE */
      R _ret=null;
      if(flag==0)
      {
              n.f0.accept(this, argu);
	      n.f1.accept(this, argu);
	      n.f2.accept(this, argu);  
      }
      else
      {
	      n.f0.accept(this, argu);
	      String T1=(String) n.f1.accept(this, argu);
	      n.f2.accept(this, argu);      
	      _ret=(R) T1;
      }
      
      return _ret;
   }

   /**
    * f0 -> Identifier()
    * f1 -> ( IdentifierRest() )*
    */
   public R visit(IdentifierList n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> ","
    * f1 -> Identifier()
    */
   public R visit(IdentifierRest n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      return _ret;
   }

}
