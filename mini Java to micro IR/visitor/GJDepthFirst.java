//
// Generated by JTB 1.3.2
//

package visitor;
import syntaxtree.*;
import java.util.*;

class meth_info {
 
    public String ret_type;
    public ArrayList<String> f_args = new ArrayList<String>(0);
    public ArrayList<String> f_type = new ArrayList<String>(0);
    public HashMap<String,String> local_vars = new HashMap<String,String>();

    public void print_func_info()
    {
       System.out.println("The method info is:");       
       System.out.println("Ret type = "+ret_type); 
       
       System.out.println("Formal params:");
       for(int y=0;y<f_args.size();y++)
       {
         System.out.println(f_args.get(y)+" "+f_type.get(y));
       }
             
       System.out.println("local variables: ");       
       System.out.println(local_vars);
       System.out.println("\n");
             
    }
}

class var_off
{
  public String name;
  public int offset;
}

class meth_off
{
  public String name;
  public int offset;
}

/**
 * Provides default methods which visit each node in the tree in depth-first
 * order.  Your visitors may extend this class.
 */
public class GJDepthFirst<R,A> implements GJVisitor<R,A> {
   //
   // Auto class visitors--probably don't need to be overridden.
  
   public static HashMap<String,String> class_parent = new HashMap<String,String>();
   public static HashMap<String,HashMap<String,String>> class_vars = new HashMap<String,HashMap<String,String>>(); 
   public static HashMap<String,HashMap<String,meth_info>> class_meth = new HashMap<String,HashMap<String,meth_info>>(); 
   
   public static HashMap<String,HashMap<String,Integer>> vars_offs = new HashMap<String,HashMap<String,Integer>>(); 
   public static HashMap<String,HashMap<String,Integer>> meth_offs = new HashMap<String,HashMap<String,Integer>>(); 
   
   public static HashMap<String,String> temp_type = new HashMap<String,String>(); 
   public static HashMap<String,String> id_temp = new HashMap<String,String>(); 
   
   public static ArrayList<ArrayList<String>> arg_list = new ArrayList<ArrayList<String>>();
   
   int pass=0;
   
   String this_class;
   String this_func;
   
   String curr_class;
   String curr_func;   
   int class_data;
   boolean debug=false;
   boolean debug4=false;
   boolean debug5=false;
   
   boolean pri_exp=false;
   
   int temp_no=6;
   int label_no=1;
   
   
   public void printTables() {
  System.out.println("\n\nThe class_parent table is******************************************************");
  Iterator<Map.Entry<String, String>> itr = class_parent.entrySet().iterator();
   
  Map.Entry<String, String> entry = null;
  while(itr.hasNext()){
      
      entry = itr.next();
      System.out.println( entry.getKey() + "->" + entry.getValue() );
  }
  
  System.out.println("\n\nThe class_vars table is******************************************************");
  for (Map.Entry<String, HashMap<String, String>> entry2 : class_vars.entrySet()) {
        System.out.println(entry2.getKey()+":\n");
        Map<String, String> childMap = entry2.getValue();
        System.out.println(childMap);
    }
   
  System.out.println("\n\nThe class_meth table is******************************************************"); 
  for (Map.Entry<String, HashMap<String, meth_info>> entry3 : class_meth.entrySet()) {
  
        System.out.println(entry3.getKey()+":\n");
        Map<String, meth_info> childMap = entry3.getValue();

        for (Map.Entry<String, meth_info> entry4 : childMap.entrySet()) {
            String childKey = entry4.getKey();
            System.out.println(childKey+":");
            meth_info childValue = entry4.getValue();
            childValue.print_func_info();
        }
        System.out.println();
    }
  
  }
  
  public static void Init()
  {
    boolean debug2=false;
    
    if(debug2)
    {
      //System.out.println("\n\nInitializing******************************************************");
    }
      
  Iterator<Map.Entry<String, String>> itr = class_parent.entrySet().iterator();
   
  Map.Entry<String, String> entry = null;
  while(itr.hasNext()){
      
      entry = itr.next();
      String current_class=entry.getKey();
      if(debug2)
      {
        //System.out.println("Initializing record for class "+current_class);
      }
      
      int o=4;
      
      Stack<String> ancestors = new Stack<String>();
      String class_itr=current_class;
      while(!class_itr.equals("1NULL"))
      {
        ancestors.push(class_itr);
        class_itr=class_parent.get(class_itr);
      } 
	   
      while(!ancestors.empty())
      {
      
      String c_class=ancestors.peek();
      if(!vars_offs.containsKey(current_class))
            {
              HashMap<String,Integer> temp_map=new HashMap<String,Integer>();              
              vars_offs.put(current_class,temp_map);
            }
      
        
        if(class_vars.containsKey(c_class))
        {
        Map<String, String> childMap = class_vars.get(c_class);
        for (Map.Entry<String, String> entry4 : childMap.entrySet()) {
            String childKey = entry4.getKey();  //childKey=varName
            
            if(vars_offs.get(current_class).containsKey(childKey))
            {
              String temp_key=childKey+"_"+c_class;
              int temp_off = vars_offs.get(current_class).get(childKey);
              
              vars_offs.get(current_class).put(temp_key,temp_off);
              vars_offs.get(current_class).replace(childKey,o);
            }
            else
            {
              vars_offs.get(current_class).put(childKey,o);
            }
            o=o+4;            
        }
        }
        
        ancestors.pop();
      }
            
      o=0;
      class_itr=current_class;
      while(!class_itr.equals("1NULL"))
      {
        ancestors.push(class_itr);
        class_itr=class_parent.get(class_itr);
      } 
      
      while(!ancestors.empty())
      {
              String c_class=ancestors.peek();
                            
	      if(!meth_offs.containsKey(current_class))
		    {
		      HashMap<String,Integer> temp_map=new HashMap<String,Integer>();              
		      meth_offs.put(current_class,temp_map);
		    }
	      
		
			//System.out.println(entry3.getKey()+":\n");
			if(class_meth.containsKey(c_class))
			{
			Map<String, meth_info> childMap2 = class_meth.get(c_class);
			for (Map.Entry<String, meth_info> entry5 : childMap2.entrySet()) {
			    String childKey = entry5.getKey();  //childKey=funcName
			    
			    if(meth_offs.get(current_class).containsKey(childKey))
			    {
			      //int temp_off=meth_offs.get(current_class).get(childKey);
			      //meth_offs.get(current_class).put(childKey,o);
			    }
			    else
			    {
			      meth_offs.get(current_class).put(childKey,o);
			      o=o+4;
			    }
			                
			}
		}
        
            ancestors.pop();
        }
  } 
  
         
   }
   
   public void printOffs()
   {
     System.out.println("\n\nThe vars_offs table is******************************************************");
  for (Map.Entry<String, HashMap<String, Integer>> entry2 : vars_offs.entrySet()) {
        System.out.println(entry2.getKey()+":\n");
        Map<String, Integer> childMap = entry2.getValue();
        System.out.println(childMap);
    }
    
    System.out.println("\n\nThe meth_offs table is******************************************************");
  for (Map.Entry<String, HashMap<String, Integer>> entry2 : meth_offs.entrySet()) {
        System.out.println(entry2.getKey()+":\n");
        Map<String, Integer> childMap = entry2.getValue();
        System.out.println(childMap);
    }
   }
      
	 public R visit(NodeList n, A argu) {
      R _ret=null;
      int _count=0;
      for ( Enumeration<Node> e = n.elements(); e.hasMoreElements(); ) {
         e.nextElement().accept(this,argu);
         _count++;
      }
      return _ret;
   }

   public R visit(NodeListOptional n, A argu) {
      if ( n.present() ) {
         R _ret=null;
         int _count=0;
         for ( Enumeration<Node> e = n.elements(); e.hasMoreElements(); ) {
            e.nextElement().accept(this,argu);
            _count++;
         }
         return _ret;
      }
      else
         return null;
   }

   public R visit(NodeOptional n, A argu) {
      if ( n.present() )
         return n.node.accept(this,argu);
      else
         return null;
   }

   public R visit(NodeSequence n, A argu) {
      R _ret=null;
      int _count=0;
      for ( Enumeration<Node> e = n.elements(); e.hasMoreElements(); ) {
         e.nextElement().accept(this,argu);
         _count++;
      }
      return _ret;
   }

   public R visit(NodeToken n, A argu) { return (R)n.tokenImage; }

   //
   // User-generated visitor methods below
   //

   /**
    * f0 -> MainClass()
    * f1 -> ( TypeDeclaration() )*
    * f2 -> <EOF>
    */
   public R visit(Goal n, A argu) {
		/* YOUR CODE HERE */

      if(debug)
      {
         System.out.println("DFS started at Goal");
      }
      
      R _ret=null;
      
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      
      if(debug)
      {
         System.out.println("DFS completed at Goal");
      }
      
      if(debug)
      {
        printTables();
      }
      
      Init();
      
      if(debug)
      {
      printOffs();
      }
      
      pass=1;
      if(debug)
      {
         System.out.println("DFS started second time at Goal");
      }
      
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
          
      if(debug)
      {
         System.out.println("DFS completed at Goal");
      }
      
      return _ret;
   }

   /**
    * f0 -> "class"
    * f1 -> Identifier()
    * f2 -> "{"
    * f3 -> "public"
    * f4 -> "static"
    * f5 -> "void"
    * f6 -> "main"
    * f7 -> "("
    * f8 -> "String"
    * f9 -> "["
    * f10 -> "]"
    * f11 -> Identifier()
    * f12 -> ")"
    * f13 -> "{"
    * f14 -> PrintStatement()
    * f15 -> "}"
    * f16 -> "}"
    */
   public R visit(MainClass n, A argu) {
		/* YOUR CODE HERE */

      R _ret=null;
      
      if(pass==0)
      {
	      n.f0.accept(this, argu);	      
	      String className = (String) n.f1.accept(this, argu);
              class_parent.put(className,"1NULL"); 
      
	      n.f2.accept(this, argu);
	      n.f3.accept(this, argu);
	      n.f4.accept(this, argu);
	      n.f5.accept(this, argu);
	      n.f6.accept(this, argu);
	      n.f7.accept(this, argu);
	      n.f8.accept(this, argu);
	      n.f9.accept(this, argu);
	      n.f10.accept(this, argu);
	      n.f11.accept(this, argu);
	      n.f12.accept(this, argu);
	      n.f13.accept(this, argu);
	      n.f14.accept(this, argu);
	      n.f15.accept(this, argu);
	      n.f16.accept(this, argu);
      }
      else if(pass==1)
      {
       n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      n.f3.accept(this, argu);
      n.f4.accept(this, argu);
      n.f5.accept(this, argu);
      System.out.println("MAIN");
      
      n.f6.accept(this, argu);
      n.f7.accept(this, argu);
      n.f8.accept(this, argu);
      n.f9.accept(this, argu);
      n.f10.accept(this, argu);
      n.f11.accept(this, argu);
      n.f12.accept(this, argu);
      n.f13.accept(this, argu);
      n.f14.accept(this, argu);
      n.f15.accept(this, argu);
      n.f16.accept(this, argu); 
      System.out.println("END");
      
      }
      else
      {
        n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      n.f3.accept(this, argu);
      n.f4.accept(this, argu);
      n.f5.accept(this, argu);
      n.f6.accept(this, argu);
      n.f7.accept(this, argu);
      n.f8.accept(this, argu);
      n.f9.accept(this, argu);
      n.f10.accept(this, argu);
      n.f11.accept(this, argu);
      n.f12.accept(this, argu);
      n.f13.accept(this, argu);
      n.f14.accept(this, argu);
      n.f15.accept(this, argu);
      n.f16.accept(this, argu);
      }
      return _ret;
   }

   /**
    * f0 -> ClassDeclaration()
    *       | ClassExtendsDeclaration()
    */
   public R visit(TypeDeclaration n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "class"
    * f1 -> Identifier()
    * f2 -> "{"
    * f3 -> ( VarDeclaration() )*
    * f4 -> ( MethodDeclaration() )*
    * f5 -> "}"
    */
   public R visit(ClassDeclaration n, A argu) {
		/* YOUR CODE HERE */

      R _ret=null;
      
      if(pass==0)
      {
      n.f0.accept(this, argu);
      String className = (String) n.f1.accept(this, argu);
      class_parent.put(className,"1NULL"); 
            
      n.f2.accept(this, argu);
      this_class=className;
      class_data=1;
        
      n.f3.accept(this, argu);
      class_data=0;
      
      n.f4.accept(this, argu);
      n.f5.accept(this, argu);
      }
      else if(pass==1)
      {
        n.f0.accept(this, argu);
        String className = (String) n.f1.accept(this, argu);
        this_class=className;
        
        if(debug)
        {
           System.out.println("this_class set to "+className);
        }
        
        class_data=1;
        
        n.f2.accept(this, argu);
        n.f3.accept(this, argu);
        class_data=0;
        
        n.f4.accept(this, argu);
        n.f5.accept(this, argu);
      }
      else
      {
       n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      n.f3.accept(this, argu);
      n.f4.accept(this, argu);
      n.f5.accept(this, argu);
      }
      return _ret;
   }

   /**
    * f0 -> "class"
    * f1 -> Identifier()
    * f2 -> "extends"
    * f3 -> Identifier()
    * f4 -> "{"
    * f5 -> ( VarDeclaration() )*
    * f6 -> ( MethodDeclaration() )*
    * f7 -> "}"
    */
   public R visit(ClassExtendsDeclaration n, A argu) {
		/* YOUR CODE HERE */

      R _ret=null;
      if(pass==0)
      {
      n.f0.accept(this, argu);
      String className = (String)n.f1.accept(this, argu);   
            
      n.f2.accept(this, argu);
      String parentName = (String)n.f3.accept(this, argu);
      if(debug)
      {
        System.out.println("Class name =  " + className + "is a subclass of "+parentName);
      }
      class_parent.put(className,parentName);  
      
      n.f4.accept(this, argu);
      this_class=className;
      if(debug)
      {
        System.out.println("this_class set to "+className);
      }
        
      class_data=1;
      
      n.f5.accept(this, argu);
      class_data=0;
      
      n.f6.accept(this, argu);
      n.f7.accept(this, argu);
      }
      else if(pass==1)
      {
	      n.f0.accept(this, argu);
	      String className = (String) n.f1.accept(this, argu);
	      this_class=className;
	      
	      n.f2.accept(this, argu);
	      n.f3.accept(this, argu);
	      n.f4.accept(this, argu);
	      class_data=1;
	      
	      n.f5.accept(this, argu);
	      class_data=0;
	      
	      n.f6.accept(this, argu);
	      n.f7.accept(this, argu);
      }
      else
      {
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      n.f3.accept(this, argu);
      n.f4.accept(this, argu);
      n.f5.accept(this, argu);
      n.f6.accept(this, argu);
      n.f7.accept(this, argu);
      }
      return _ret;
   }

   /**
    * f0 -> Type()
    * f1 -> Identifier()
    * f2 -> ";"
    */
   public R visit(VarDeclaration n, A argu) {
		/* YOUR CODE HERE */

      R _ret=null;
      if(pass==0)
      {
      if(debug)
      {
      System.out.println("In Var declaration");
      }
      
      String varType=(String) n.f0.accept(this, argu);
      String varName = (String) n.f1.accept(this, argu);
      if(class_data==1)
      {
      if(!class_vars.containsKey(this_class))
      {
        HashMap<String,String> temp_map=new HashMap<String,String>();
        temp_map.put(varName,varType);
        class_vars.put(this_class,temp_map);
      }
      else
      {
        class_vars.get(this_class).put(varName,varType);
      }
      }
      else
      {
        class_meth.get(this_class).get(this_func).local_vars.put(varName,varType);
      }
            
      n.f2.accept(this, argu);
      }
      else if(pass==1)
      {
		String v_type = (String) n.f0.accept(this, argu);
		String v_name = (String) n.f1.accept(this, argu);
		
		if(class_data!=1)
		{
		String v_temp = String.valueOf(temp_no);
		id_temp.put(v_name,v_temp);
		temp_type.put(v_temp,v_type); 
		
		if(debug4)
		{
		  System.out.println("added "+v_name+","+v_temp+" to id_temp");
		  System.out.println("added "+v_temp+","+v_type+" to temp_type");
		}
		
		temp_no++;
		}
		
		n.f2.accept(this, argu);
      }
      else
      {
       n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      }
      return _ret;
   }

   /**
    * f0 -> "public"
    * f1 -> Type()
    * f2 -> Identifier()
    * f3 -> "("
    * f4 -> ( FormalParameterList() )?
    * f5 -> ")"
    * f6 -> "{"
    * f7 -> ( VarDeclaration() )*
    * f8 -> ( Statement() )*
    * f9 -> "return"
    * f10 -> Expression()
    * f11 -> ";"
    * f12 -> "}"
    */
   public R visit(MethodDeclaration n, A argu) {
		/* YOUR CODE HERE */

      R _ret=null;
      if(pass==0)
      {
       if(debug)
      {
      System.out.println("In method declaration");
      }
      
      n.f0.accept(this, argu);
      meth_info new_func2=new meth_info();
      new_func2.ret_type = (String) n.f1.accept(this, argu);
      String funcName = (String) n.f2.accept(this, argu);
      
      if(!class_meth.containsKey(this_class))
      {
        if(debug)
        {
        System.out.println(this_class+" not found in class_meth hashmap\n");
        }
        
        HashMap<String,meth_info> temp_func = new HashMap<String,meth_info>();
        temp_func.put(funcName,new_func2);
        class_meth.put(this_class,temp_func);  
        //printClassMeth();
      }   
      else
      {         
        class_meth.get(this_class).put(funcName,new_func2);
        //printClassMeth();
      } 
            
      n.f3.accept(this, argu);
      this_func=funcName;
      if(debug)
      {
         System.out.println("entering formal param list");
      }
      
      n.f4.accept(this, argu);          
      n.f5.accept(this, argu);
      n.f6.accept(this, argu);
      //set local variables
      class_data=0;
      
      n.f7.accept(this, argu);
      n.f8.accept(this, argu);
      n.f9.accept(this, argu);
      n.f10.accept(this, argu);
      n.f11.accept(this, argu);
      n.f12.accept(this, argu);      
      }
      else if(pass==1)
      {
	      n.f0.accept(this, argu);
	      n.f1.accept(this, argu);
	      String funcName = (String) n.f2.accept(this, argu);
	      this_func=funcName;
	      
	      int args_num=class_meth.get(this_class).get(funcName).f_args.size()+1;
	      System.out.println(this_class+"_"+funcName+" ["+args_num+"]");
	      System.out.println("BEGIN");
	      
	      n.f3.accept(this, argu);
	      n.f4.accept(this, argu);
	      n.f5.accept(this, argu);
	      temp_no=args_num+1;
	      temp_type.clear();
	      id_temp.clear();
	      
	      for(int k=0;k<args_num-1;k++)
	      {
	         String arg_tn= String.valueOf(k+1);
	         temp_type.put(arg_tn,class_meth.get(this_class).get(funcName).f_type.get(k));
	         
	         if(debug4)
		{
		  System.out.println("added2 "+arg_tn+","+class_meth.get(this_class).get(funcName).f_type.get(k)+" to temp_type");
		}
	      }
	      
	      n.f6.accept(this, argu);	      
	      
	      n.f7.accept(this, argu);
	      n.f8.accept(this, argu);
	      n.f9.accept(this, argu);
	      String ret_temp = (String) n.f10.accept(this, argu);
	      System.out.println("RETURN TEMP "+ret_temp);
	      
	      n.f11.accept(this, argu);	      
	      System.out.println("END");
	      
	      n.f12.accept(this, argu);
      }
      else
      {
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      n.f3.accept(this, argu);
      n.f4.accept(this, argu);
      n.f5.accept(this, argu);
      n.f6.accept(this, argu);
      n.f7.accept(this, argu);
      n.f8.accept(this, argu);
      n.f9.accept(this, argu);
      n.f10.accept(this, argu);
      n.f11.accept(this, argu);
      n.f12.accept(this, argu);
      }
      return _ret;
   }

   /**
    * f0 -> FormalParameter()
    * f1 -> ( FormalParameterRest() )*
    */
   public R visit(FormalParameterList n, A argu) {
		/* YOUR CODE HERE */

      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> Type()
    * f1 -> Identifier()
    */
   public R visit(FormalParameter n, A argu) {
		/* YOUR CODE HERE */

      R _ret=null;
      
      if(pass==0)
      {
      	      String param_type=(String) n.f0.accept(this, argu);
	      String param_name=(String) n.f1.accept(this, argu);
	      
	      (((class_meth.get(this_class)).get(this_func)).f_args).add(param_name);
	      (((class_meth.get(this_class)).get(this_func)).f_type).add(param_type);
      }
      else if(pass==1)
      {
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      }
      else
      {
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      }
      return _ret;
   }

   /**
    * f0 -> ","
    * f1 -> FormalParameter()
    */
   public R visit(FormalParameterRest n, A argu) {
		/* YOUR CODE HERE */

      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> ArrayType()
    *       | BooleanType()
    *       | IntegerType()
    *       | Identifier()
    */
   public R visit(Type n, A argu) {
		/* YOUR CODE HERE */

      R _ret=null;
      
      if(pass==0)
      {
      	_ret=n.f0.accept(this, argu);
      }
      else if(pass==1)
      {
       _ret = n.f0.accept(this, argu);
      }
      else
      {
      n.f0.accept(this, argu);
      }
      return _ret;
   }

   /**
    * f0 -> "int"
    * f1 -> "["
    * f2 -> "]"
    */
   public R visit(ArrayType n, A argu) {
		/* YOUR CODE HERE */

      R _ret=null;
      
      if(pass==0)
      {
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      _ret=(R) "int[]";
      }
      else if(pass==1)
      {
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      
      }
      else
      {
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      }
      return _ret;
   }

   /**
    * f0 -> "boolean"
    */
   public R visit(BooleanType n, A argu) {
		/* YOUR CODE HERE */

      R _ret=null;
            
      if(pass==0)
      {
        _ret=n.f0.accept(this, argu);
      }
      else if(pass==1)
      {
      n.f0.accept(this, argu);
      }
      else
      {
      n.f0.accept(this, argu);
      }
      
      return _ret;
   }

   /**
    * f0 -> "int"
    */
   public R visit(IntegerType n, A argu) {
		/* YOUR CODE HERE */

      R _ret=null;
      
      if(pass==0)
      {
        _ret=n.f0.accept(this, argu);
      }
      else if(pass==1)
      {
      n.f0.accept(this, argu);
      }
      else
      {
      n.f0.accept(this, argu);
      }
      
      return _ret;
   }

   /**
    * f0 -> Block()
    *       | AssignmentStatement()
    *       | ArrayAssignmentStatement()
    *       | IfStatement()
    *       | WhileStatement()
    *       | PrintStatement()
    */
   public R visit(Statement n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "{"
    * f1 -> ( Statement() )*
    * f2 -> "}"
    */
   public R visit(Block n, A argu) {
      R _ret=null;
      if(pass==0)
      {
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      }
      else
      {
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      }
      return _ret;
   }

   /**
    * f0 -> Identifier()
    * f1 -> "="
    * f2 -> Expression()
    * f3 -> ";"
    */
   public R visit(AssignmentStatement n, A argu) {
		/* YOUR CODE HERE */

      R _ret=null;
      if(pass==0)
      {
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      n.f3.accept(this, argu);
      }
      else
      {
	      n.f0.accept(this, argu);      
	      String v_name = (String) n.f0.accept(this, argu);
	      String v_temp="";
	      String v_type="";
	      
	      n.f1.accept(this, argu);
	      String rhs = (String) n.f2.accept(this, argu);
	      
	      if(class_meth.get(this_class).get(this_func).local_vars.containsKey(v_name))
	      {
	              if(id_temp.containsKey(v_name))
		      {
			v_temp=id_temp.get(v_name);		
		      }
		      else
		      {
			v_temp = String.valueOf(temp_no);
			temp_no++;
			id_temp.put(v_name,v_temp);
		      }
		      v_type=class_meth.get(this_class).get(this_func).local_vars.get(v_name);
		      temp_type.put(v_temp,v_type);
			
		      System.out.println("MOVE TEMP "+v_temp+" TEMP "+rhs);
		      
		      if(debug5)
		      {
		        System.out.println("printed from assign stmt");
		      }
	      }
	      else if(class_meth.get(this_class).get(this_func).f_args.contains(v_name))
	      {
	        int arg_index = class_meth.get(this_class).get(this_func).f_args.indexOf(v_name);
	        int arg_i_num=arg_index+1;
	        System.out.println("MOVE TEMP "+arg_i_num+" TEMP "+rhs);
	        
			if(debug5)
			{
			    System.out.println("printed from assign stmt 2");
			}	        
	      }
	      else if(vars_offs.containsKey(this_class)&&vars_offs.get(this_class).containsKey(v_name))
	      {
	        int var_offset2 = vars_offs.get(this_class).get(v_name); 
	        System.out.println("HSTORE TEMP 0 "+var_offset2+" TEMP "+rhs);
	      }
	      else
	      {
	        //ERROR
	        System.out.println("INVALID INPUT PROGRAM");
	      }
	      
	      
	      n.f3.accept(this, argu);
      }
      return _ret;
   }

   /**
    * f0 -> Identifier()
    * f1 -> "["
    * f2 -> Expression()
    * f3 -> "]"
    * f4 -> "="
    * f5 -> Expression()
    * f6 -> ";"
    */
   public R visit(ArrayAssignmentStatement n, A argu) {
		/* YOUR CODE HERE */

      R _ret=null;
      if(pass==0)
      {
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      n.f3.accept(this, argu);
      n.f4.accept(this, argu);
      n.f5.accept(this, argu);
      n.f6.accept(this, argu);
      }
      else
      {
      String arr_name = (String) n.f0.accept(this, argu);
      String arr_addr="";
                  
      n.f1.accept(this, argu);
      String index = (String) n.f2.accept(this, argu);
      n.f3.accept(this, argu);
      n.f4.accept(this, argu);
      String rhs = (String) n.f5.accept(this, argu);
      
             
              if(class_meth.get(this_class).get(this_func).local_vars.containsKey(arr_name))
	      {
	              if(id_temp.containsKey(arr_name))
		      {
			arr_addr=id_temp.get(arr_name);
		      }
		      else
		      {
			arr_addr = String.valueOf(temp_no);
			temp_no++;
			id_temp.put(arr_name,arr_addr);
		      }
	      }
	      else if(class_meth.get(this_class).get(this_func).f_args.contains(arr_name))
	      {
	        int arg_index = class_meth.get(this_class).get(this_func).f_args.indexOf(arr_name);
	        
	        arr_addr=String.valueOf(arg_index+1);	
	        
	        if(debug5)
		      {
		        System.out.println("printed from array assign stmt");
		      }        
	      }
	      else if(vars_offs.containsKey(this_class)&&vars_offs.get(this_class).containsKey(arr_name))
	      {
	        int var_offset2 = vars_offs.get(this_class).get(arr_name); 
	        System.out.println("HLOAD TEMP "+temp_no+" TEMP 0 "+var_offset2);
	        arr_addr=String.valueOf(temp_no);
	        temp_no++;
	      }
	      else
	      {
	        //ERROR
	        System.out.println("INVALID INPUT PROGRAM");
	      }
      
      System.out.println("MOVE TEMP "+temp_no+" TIMES TEMP "+index+" 4");
      String t1 = String.valueOf(temp_no);
      temp_no++;
      System.out.println("MOVE TEMP "+temp_no+" PLUS TEMP "+t1+" 4");
      String t2 = String.valueOf(temp_no);
      temp_no++;      
      System.out.println("MOVE TEMP "+temp_no+" PLUS TEMP "+arr_addr+" TEMP "+t2);
      String t3 = String.valueOf(temp_no);
      temp_no++;
      System.out.println("HSTORE TEMP "+t3+" 0 TEMP "+rhs);      
      temp_no++;
      
      n.f6.accept(this, argu);
      }
      return _ret;
   }

   /**
    * f0 -> IfthenElseStatement()
    *       | IfthenStatement()
    */
   public R visit(IfStatement n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "if"
    * f1 -> "("
    * f2 -> Expression()
    * f3 -> ")"
    * f4 -> Statement()
    */
   public R visit(IfthenStatement n, A argu) {
		/* YOUR CODE HERE */

      R _ret=null;
      if(pass==0)
      {
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      n.f3.accept(this, argu);
      n.f4.accept(this, argu);
      }
      else
      {
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      String cond = (String) n.f2.accept(this, argu);     
      int end_if = label_no;
      label_no++;
      System.out.println("CJUMP TEMP "+cond+" L"+end_if);
      
      n.f3.accept(this, argu);
      
      //then part
      n.f4.accept(this, argu);      
      System.out.println("L"+end_if);
      System.out.println("NOOP");      
      }
      return _ret;
   }

   /**
    * f0 -> "if"
    * f1 -> "("
    * f2 -> Expression()
    * f3 -> ")"
    * f4 -> Statement()
    * f5 -> "else"
    * f6 -> Statement()
    */
   public R visit(IfthenElseStatement n, A argu) {
		/* YOUR CODE HERE */

      R _ret=null;
      if(pass==0)
      {
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      n.f3.accept(this, argu);
      n.f4.accept(this, argu);
      n.f5.accept(this, argu);
      n.f6.accept(this, argu);
      }
      else
      {
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      String cond = (String) n.f2.accept(this, argu);
      
      int else_label = label_no;
      label_no++;
      int end_if = label_no;
      label_no++;
      System.out.println("CJUMP TEMP "+cond+" L"+else_label);
      
      n.f3.accept(this, argu);
      
      //then part
      n.f4.accept(this, argu);
      System.out.println("JUMP L"+end_if);
      System.out.println("L"+else_label);
      
      n.f5.accept(this, argu);
      
      //else part
      n.f6.accept(this, argu);
      System.out.println("L"+end_if);
      System.out.println("NOOP");
      
      }
      return _ret;
   }

   /**
    * f0 -> "while"
    * f1 -> "("
    * f2 -> Expression()
    * f3 -> ")"
    * f4 -> Statement()
    */
   public R visit(WhileStatement n, A argu) {
		/* YOUR CODE HERE */

      R _ret=null;
      if(pass==0)
      {
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      n.f3.accept(this, argu);
      n.f4.accept(this, argu);
      }
      else
      {
      n.f0.accept(this, argu);
      System.out.println("L"+label_no);
      int while_label=label_no;
      label_no++;
      int end_while_label=label_no;
      label_no++;
                 
      n.f1.accept(this, argu);
      String cond = (String) n.f2.accept(this, argu);     
      System.out.println("CJUMP TEMP "+cond+" L"+end_while_label);
                      
      n.f3.accept(this, argu);
      
      //while body
      n.f4.accept(this, argu);
      
      System.out.println("JUMP L"+while_label);
      System.out.println("L"+end_while_label);
      System.out.println("NOOP");
      
      }
      return _ret;
   }

   /**
    * f0 -> "System.out.println"
    * f1 -> "("
    * f2 -> Expression()
    * f3 -> ")"
    * f4 -> ";"
    */
   public R visit(PrintStatement n, A argu) {
		/* YOUR CODE HERE */

      R _ret=null;
      if(pass==0)
      {
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      n.f3.accept(this, argu);
      n.f4.accept(this, argu);
      }
      else
      {
        n.f0.accept(this, argu);
        n.f1.accept(this, argu);
        String t1 = (String) n.f2.accept(this, argu);
        System.out.println("PRINT TEMP "+t1);
        
        n.f3.accept(this, argu);
        n.f4.accept(this, argu);
      }
      return _ret;
   }

   /**
    * f0 -> OrExpression()
    *       | AndExpression()
    *       | CompareExpression()
    *       | neqExpression()
    *       | PlusExpression()
    *       | MinusExpression()
    *       | TimesExpression()
    *       | DivExpression()
    *       | ArrayLookup()
    *       | ArrayLength()
    *       | MessageSend()
    *       | PrimaryExpression()
    */
   public R visit(Expression n, A argu) {
		/* YOUR CODE HERE */

      R _ret=null;
      if(pass==0)
      {
      n.f0.accept(this, argu);
      }
      else
      {
        if(debug)
        {
          System.out.println("in Expression n");
        }
        
        _ret = n.f0.accept(this, argu);
      }
      return _ret;
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "&&"
    * f2 -> PrimaryExpression()
    */
   public R visit(AndExpression n, A argu) {
		/* YOUR CODE HERE */

      R _ret=null;
      if(pass==0)
      {
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      }
      else
      {
        String t1 = (String) n.f0.accept(this, argu);
        n.f1.accept(this, argu);
        
        boolean debug3=false;
        
        System.out.println("MOVE TEMP "+temp_no+" NE TEMP "+t1+" 0");  //temp1                
        System.out.println("CJUMP TEMP "+temp_no+" L"+label_no);   //temp1, label 1
        
        if(debug3)
        {
          System.out.println("this cjump 1");
        }
        
        int jmp_l1=label_no;   //jmp_l1 = label 1
        temp_no++;              //temp2
        label_no++;
        
        String t2 = (String) n.f2.accept(this, argu);
        
        System.out.println("MOVE TEMP "+temp_no+" NE TEMP "+t2+" 0");  //temp2
        System.out.println("CJUMP TEMP "+temp_no+" L"+jmp_l1);       //temp2, label1
        
        if(debug3)
        {
          System.out.println("this cjump 2");
        }
        
        temp_no++;   //temp3
        
        System.out.println("MOVE TEMP "+temp_no+" 1");  //temp3
        System.out.println("JUMP L"+label_no);          //label2
        System.out.println("L"+jmp_l1);             //label1
        System.out.println("MOVE TEMP "+temp_no+" 0");  //temp3
        String and_result = String.valueOf(temp_no);        
        temp_no++;                                      //temp4
        System.out.println("L"+label_no);           //label2
        label_no++;                                     //label3
        System.out.println("NOOP");
        
        _ret=(R) and_result;
      }
   
      return _ret;
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "||"
    * f2 -> PrimaryExpression()
    */
   public R visit(OrExpression n, A argu) {
		/* YOUR CODE HERE */

      R _ret=null;
      if(pass==0)
      {
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      }
      else
      {
        String t1 = (String) n.f0.accept(this, argu);
        n.f1.accept(this, argu);
        
        System.out.println("MOVE TEMP "+temp_no+" NE TEMP "+t1+" 1");  //temp1                
        System.out.println("CJUMP TEMP "+temp_no+" L"+label_no);   //temp1, label 1
        int jmp_l1=label_no;   //jmp_l1 = label 1
        label_no++;
        temp_no++;             //temp2
        
        String t2 = (String) n.f2.accept(this, argu);
        
        System.out.println("MOVE TEMP "+temp_no+" NE TEMP "+t2+" 1");  //temp2
        System.out.println("CJUMP TEMP "+temp_no+" L"+jmp_l1);       //temp2, label1
        //label_no++;  //label2
        temp_no++;   //temp3
        
        System.out.println("MOVE TEMP "+temp_no+" 0");  //temp3
        System.out.println("JUMP L"+label_no);          //label2
        System.out.println("L"+jmp_l1);             //label1
        System.out.println("MOVE TEMP "+temp_no+" 1");  //temp3
        String or_result = String.valueOf(temp_no);
        temp_no++;                                      //temp4
        System.out.println("L"+label_no);           //label2
        label_no++;                                     //label3
        System.out.println("NOOP");
        
        _ret=(R) or_result;
      }
      return _ret;
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "<="
    * f2 -> PrimaryExpression()
    */
   public R visit(CompareExpression n, A argu) {
		/* YOUR CODE HERE */

      R _ret=null;
      if(pass==0)
      {
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      }
      else
      {
        String t1 = (String) n.f0.accept(this, argu);
        n.f1.accept(this, argu);
        String t2 = (String) n.f2.accept(this, argu);
        
        System.out.println("MOVE TEMP "+temp_no+" LE TEMP "+t1+" TEMP "+t2);
        _ret =(R) String.valueOf(temp_no);
        temp_no++;   
      }
      return _ret;
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "!="
    * f2 -> PrimaryExpression()
    */
   public R visit(neqExpression n, A argu) {
		/* YOUR CODE HERE */

      R _ret=null;
      if(pass==0)
      {
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      }
      else
      {
        String t1 = (String) n.f0.accept(this, argu);
        n.f1.accept(this, argu);
        String t2 = (String) n.f2.accept(this, argu);
        
        System.out.println("MOVE TEMP "+temp_no+" NE TEMP "+t1+" TEMP "+t2);
        _ret =(R) String.valueOf(temp_no);
        temp_no++;   
      }
      return _ret;
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "+"
    * f2 -> PrimaryExpression()
    */
   public R visit(PlusExpression n, A argu) {
		/* YOUR CODE HERE */

      R _ret=null;
     if(pass==0)
      {
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      }
      else
      {
        String t1 = (String) n.f0.accept(this, argu);
        n.f1.accept(this, argu);
        String t2 = (String) n.f2.accept(this, argu);
        
        System.out.println("MOVE TEMP "+temp_no+" PLUS TEMP "+t1+" TEMP "+t2);
        _ret =(R) String.valueOf(temp_no);
        temp_no++;   
      }
      return _ret;
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "-"
    * f2 -> PrimaryExpression()
    */
   public R visit(MinusExpression n, A argu) {
		/* YOUR CODE HERE */

      R _ret=null;
      if(pass==0)
      {
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      }
      else
      {
        String t1 = (String) n.f0.accept(this, argu);
        n.f1.accept(this, argu);
        String t2 = (String) n.f2.accept(this, argu);
        
        System.out.println("MOVE TEMP "+temp_no+" MINUS TEMP "+t1+" TEMP "+t2);
        _ret =(R) String.valueOf(temp_no);
        temp_no++;   
      }
      return _ret;
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "*"
    * f2 -> PrimaryExpression()
    */
   public R visit(TimesExpression n, A argu) {
		/* YOUR CODE HERE */

      R _ret=null;
      if(pass==0)
      {
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      }
      else
      {
        String t1 = (String) n.f0.accept(this, argu);
        n.f1.accept(this, argu);
        String t2 = (String) n.f2.accept(this, argu);
        
        System.out.println("MOVE TEMP "+temp_no+" TIMES TEMP "+t1+" TEMP "+t2);
        _ret =(R) String.valueOf(temp_no);
        temp_no++;   
      }
      return _ret;
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "/"
    * f2 -> PrimaryExpression()
    */
   public R visit(DivExpression n, A argu) {
		/* YOUR CODE HERE */

      R _ret=null;
      if(pass==0)
      {
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      }
      else
      {
        String t1 = (String) n.f0.accept(this, argu);
        n.f1.accept(this, argu);
        String t2 = (String) n.f2.accept(this, argu);
        
        System.out.println("MOVE TEMP "+temp_no+" DIV TEMP "+t1+" TEMP "+t2);
        _ret =(R) String.valueOf(temp_no);
        temp_no++;        
      }
      return _ret;
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "["
    * f2 -> PrimaryExpression()
    * f3 -> "]"
    */
   public R visit(ArrayLookup n, A argu) {
		/* YOUR CODE HERE */

      R _ret=null;
      if(pass==0)
      {
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      n.f3.accept(this, argu);
      }
      else
      {
        String t1 = (String) n.f0.accept(this, argu);
        n.f1.accept(this, argu);
        String t2 = (String) n.f2.accept(this, argu);
        n.f3.accept(this, argu);
        
        System.out.println("MOVE TEMP "+temp_no+" TIMES "+"TEMP "+t2+" 4");
        String index_prev=String.valueOf(temp_no);
        temp_no++;
        
        System.out.println("MOVE TEMP "+temp_no+" PLUS TEMP "+index_prev+" 4");
        String index=String.valueOf(temp_no);
        temp_no++;
        
        String arr_addr=String.valueOf(t1);
        System.out.println("MOVE TEMP "+temp_no+" PLUS TEMP "+t1+" TEMP "+index);
        String index3=String.valueOf(temp_no);
        temp_no++;
                
        System.out.println("HLOAD TEMP "+temp_no+" TEMP "+index3+" 0");
        _ret =(R) String.valueOf(temp_no);
        temp_no++;
        
      }
      return _ret;
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "."
    * f2 -> "length"
    */
   public R visit(ArrayLength n, A argu) {
		/* YOUR CODE HERE */

      R _ret=null;
      if(pass==0)
      {
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      }
      else
      {
        String t1 = (String) n.f0.accept(this, argu);
        n.f1.accept(this, argu);
        n.f2.accept(this, argu);
        
        System.out.println("HLOAD TEMP "+temp_no+" TEMP "+t1+" 0");
        _ret=(R) String.valueOf(temp_no);
        temp_no++;
      }
      return _ret;
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "."
    * f2 -> Identifier()
    * f3 -> "("
    * f4 -> ( ExpressionList() )?
    * f5 -> ")"
    */
   public R visit(MessageSend n, A argu) {
		/* YOUR CODE HERE */

      //boolean debug4=true;
      
      R _ret=null;
      if(pass==0)
      {
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      n.f3.accept(this, argu);
      n.f4.accept(this, argu);
      n.f5.accept(this, argu);
      }
      else
      {
      
      if(debug)
      {
        System.out.println("in MessageSend n");
      }
      
      String p_exp = (String) n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      String funcName = (String) n.f2.accept(this, argu);
            
      n.f3.accept(this, argu);
      
      ArrayList<String> empty_list=new ArrayList<String>(0);
      arg_list.add(empty_list);     
      
      n.f4.accept(this, argu);     
      n.f5.accept(this, argu);
      
      String className="";
      
      
      if(temp_type.containsKey(p_exp))
      {        
        className=temp_type.get(p_exp);
      }
      else //p_exp should be a class variable
      {
        String class_itr=this_class;
        while(!class_itr.equals("1NULL"))    
        {
          if(debug4)
	  {
	    System.out.println("in MessageSend n class_itr =  "+class_itr+" for serahcing var "+p_exp);
	  }
      
          if(class_vars.containsKey(class_itr)&&class_vars.get(class_itr).containsKey(p_exp))
          {
             className = class_vars.get(class_itr).get(p_exp);
             break;
          }
          else
          {
            class_itr=class_parent.get(class_itr);
          }
        }        
        
      }
      
      if(debug4)
      {
        System.out.println("in MessageSend n "+className+" "+funcName);
      }
      
      int func_offset = meth_offs.get(className).get(funcName);   
      
      System.out.println("MOVE TEMP "+temp_no+" TEMP "+p_exp);
      
      if(debug5)
		      {
		        System.out.println("printed from message send");
		      }
		      
      int prev_temp2=temp_no;
      temp_no++;
      
      System.out.println("HLOAD TEMP "+temp_no+" TEMP "+prev_temp2+" 0");
      int prev_temp=temp_no;
      temp_no++;       
      System.out.println("HLOAD TEMP "+temp_no+" TEMP "+prev_temp+" "+func_offset);  
      String func_addr=String.valueOf(temp_no);
      temp_no++;
      
      //func call with arguments from arg_list
      System.out.print("MOVE TEMP "+temp_no+" CALL TEMP "+func_addr+" ( TEMP "+prev_temp2+" ");
      _ret=(R) String.valueOf(temp_no);
      
      String cc_class=className;
      while(!cc_class.equals("1NULL"))
      {
        if(class_meth.containsKey(cc_class)&&class_meth.get(cc_class).containsKey(funcName))
        {
          temp_type.put(String.valueOf(temp_no),class_meth.get(cc_class).get(funcName).ret_type);
          break;
        }
        else
        {
          cc_class=class_parent.get(cc_class);
        }
      }
      
      temp_no++;
      
      //System.out.println("TEMP "+arg_list[last][i]+" ");
      
      int last=arg_list.size()-1;
      if(last>=0)
      {
      int s=arg_list.get(last).size();
      /*if(debug)
      {
        System.out.println("size of top of arg_list = "+s);
      }*/
      
      for(int i=0;i<s;i++)
      {
        System.out.print("TEMP "+arg_list.get(last).get(i)+" ");
      }      
      }
      
      System.out.println(")");
      
      int l_index=arg_list.size()-1;
      arg_list.remove(l_index);
      
      }
      return _ret;
   }

   /**
    * f0 -> Expression()
    * f1 -> ( ExpressionRest() )*
    */
   public R visit(ExpressionList n, A argu) {
		/* YOUR CODE HERE */

      R _ret=null;
      if(pass==0)
      {
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      }
      else
      {
       String t1=(String) n.f0.accept(this, argu);
       System.out.println("MOVE TEMP "+temp_no+" TEMP "+t1);
       
       if(debug5)
		      {
		        System.out.println("printed from expr list");
		      }
		      
       String t2 = String.valueOf(temp_no);
       temp_no++;
       
       if(arg_list.size()>0)
       {
         arg_list.get(arg_list.size()-1).add(t2);
         
         if(debug)
         {
           System.out.println("added an arg "+t2+ " in Expression list");
         }
       }
       
       n.f1.accept(this, argu);
      }
      return _ret;
   }

   /**
    * f0 -> ","
    * f1 -> Expression()
    */
   public R visit(ExpressionRest n, A argu) {
		/* YOUR CODE HERE */

      R _ret=null;
      if(pass==0)
      {
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      }
      else
      {
        n.f0.accept(this, argu);
        String t1=(String) n.f1.accept(this, argu);
        System.out.println("MOVE TEMP "+temp_no+" TEMP "+t1);
        
        if(debug5)
		      {
		        System.out.println("printed from expr rest");
		      }
        
        String t2 = String.valueOf(temp_no);
        temp_no++;
        
        if(arg_list.size()>0)
        {
          arg_list.get(arg_list.size()-1).add(t2);
          
          if(debug)
          {
            System.out.println("added an arg in Expression Rest");
          }
        }
      }
      return _ret;
   }

   /**
    * f0 -> IntegerLiteral()
    *       | TrueLiteral()
    *       | FalseLiteral()
    *       | Identifier()
    *       | ThisExpression()
    *       | ArrayAllocationExpression()
    *       | AllocationExpression()
    *       | NotExpression()
    *       | BracketExpression()
    */
   public R visit(PrimaryExpression n, A argu) {
		/* YOUR CODE HERE */

      R _ret=null;
      if(pass==0)
      {
      n.f0.accept(this, argu);
      }
      else
      {
        pri_exp=true;
        _ret = n.f0.accept(this, argu); 
        pri_exp=false;
      }
      return _ret;
   }

   /**
    * f0 -> <INTEGER_LITERAL>
    */
   public R visit(IntegerLiteral n, A argu) {
		/* YOUR CODE HERE */

      R _ret=null;
      if(pass==0)
      {
      n.f0.accept(this, argu);
      }
      else
      {
        
        String t1 = (String) n.f0.accept(this, argu);
        
        if(debug)
        {
          System.out.println("in integer literal, found value "+t1);
        }
        
        System.out.println("MOVE TEMP "+temp_no+" "+t1);
        
        if(debug5)
		      {
		        System.out.println("printed from int literal");
		      }
		      
        _ret=(R) String.valueOf(temp_no);
        temp_no++;
      }
      return _ret;
   }

   /**
    * f0 -> "true"
    */
   public R visit(TrueLiteral n, A argu) {
		/* YOUR CODE HERE */

      R _ret=null;
      if(pass==0)
      {
      n.f0.accept(this, argu);
      }
      else
      {
        n.f0.accept(this, argu);
        System.out.println("MOVE TEMP "+temp_no+" 1");
        if(debug5)
		      {
		        System.out.println("printed from true");
		      }
        
        _ret = (R) String.valueOf(temp_no);
        temp_no++;
      }
      return _ret;
   }

   /**
    * f0 -> "false"
    */
   public R visit(FalseLiteral n, A argu) {
		/* YOUR CODE HERE */

      R _ret=null;
      if(pass==0)
      {
      n.f0.accept(this, argu);
      }
      else
      {
        n.f0.accept(this, argu);
        System.out.println("MOVE TEMP "+temp_no+" 0");
        
        if(debug5)
		      {
		        System.out.println("printed from false");
		      }
		      
        _ret = (R) String.valueOf(temp_no);
        temp_no++;
      }
      return _ret;
   }

   /**
    * f0 -> <IDENTIFIER>
    */
   public R visit(Identifier n, A argu) {
		/* YOUR CODE HERE */

      R _ret=null;
      if(pass==0)
      {
        _ret=n.f0.accept(this, argu);
      }
      else if(pass==1)
      {
        if(debug)
        {
        System.out.println("in Identifier n, pri_exp = "+pri_exp);
        }
        
        
        if(pri_exp)
        {
          String id_name = (String) n.f0.accept(this, argu);
          
          if(debug4)
          {
            System.out.println("checking for the id "+ id_name +" in pri_exp");
          }
          
          if(id_temp.containsKey(id_name))
          {
            if(debug4)
            {
              System.out.println("found in id_temp, temp_no= "+id_temp.get(id_name));
            }
          _ret = (R) id_temp.get(id_name);
          }
          else 
          {
            boolean flag1=false;
            String class_itr=this_class;
            
            if(debug4)
            {
              System.out.println("checking for the id "+ id_name +" in pri_exp in the class methods of class "+class_itr);
            }
                 
            while(!class_itr.equals("1NULL"))
            {
                 if(debug)
                 {
                   System.out.println("checking for the id "+ id_name +" in pri_exp in the class methods of class "+class_itr);
                 }
                 
                 if(class_meth.containsKey(class_itr)&&class_meth.get(class_itr).containsKey(this_func))
                 {
		    if(class_meth.get(class_itr).get(this_func).f_args.indexOf(id_name)!=-1)  
		    {
		      int ti=class_meth.get(class_itr).get(this_func).f_args.indexOf(id_name)+1; 
		      _ret = (R) String.valueOf(ti);
		      
		      flag1=true;
		      break;
		    }
		 }
		 class_itr=class_parent.get(class_itr);
            }
            
            if(!flag1)
            {
              if(debug4)
              {
                System.out.println("checking for the id "+ id_name +" in pri_exp in the class vars of class "+this_class);
              }
                 
              int off=vars_offs.get(this_class).get(id_name);
              //String t1 = String.valueOf(off);
              System.out.println("HLOAD TEMP "+temp_no+" TEMP 0 "+off);
              
              _ret = (R) String.valueOf(temp_no);
              temp_no++;
              
              String c_name=this_class;
              String c_type="";
              
              while(!c_name.equals("1NULL"))
              {
                if(class_vars.containsKey(c_name)&&class_vars.get(c_name).containsKey(id_name))
                {
                  c_type=class_vars.get(c_name).get(id_name);  
                  break;
                }
                else
                {
                  c_name=class_parent.get(c_name);
                }
              }
              
              temp_type.put((String) _ret,c_type);
            }
            
          }
        }
        else
        {
          _ret=n.f0.accept(this, argu);
        }
      }
      
      return _ret;
   }

   /**
    * f0 -> "this"
    */
   public R visit(ThisExpression n, A argu) {
		/* YOUR CODE HERE */

      R _ret=null;
      if(pass==0)
      {
        n.f0.accept(this, argu);
      }
      else
      {
        if(debug)
        {
          System.out.println("in This Expression n");
        }
        
        n.f0.accept(this, argu);
        //System.out.println("HLOAD TEMP "+temp_no+""); 
        
        String ret_string = "0";
        temp_type.put(ret_string,this_class);
        
        if(debug4)
        {
          System.out.println("added "+ret_string+","+this_class+" to temp_type");
        }
        
        _ret = (R) ret_string; 
      }
      return _ret;
   }

   /**
    * f0 -> "new"
    * f1 -> "int"
    * f2 -> "["
    * f3 -> Expression()
    * f4 -> "]"
    */
   public R visit(ArrayAllocationExpression n, A argu) {
		/* YOUR CODE HERE */

      R _ret=null;
      if(pass==0)
      {
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      n.f3.accept(this, argu);
      n.f4.accept(this, argu);
      }
      else
      {
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      String arr_size = (String) n.f3.accept(this, argu);
      System.out.println("MOVE TEMP "+temp_no+" TIMES TEMP "+arr_size+" 4");   
      String less_bytes = String.valueOf(temp_no);
      temp_no++;
       
      System.out.println("MOVE TEMP "+temp_no+" PLUS TEMP "+less_bytes+" 4");
      String no_of_bytes = String.valueOf(temp_no);
      temp_no++;
      
      System.out.println("MOVE TEMP "+temp_no+" HALLOCATE TEMP "+no_of_bytes);
      String arr_start = String.valueOf(temp_no);
      temp_no++;
      
      System.out.println("HSTORE TEMP "+arr_start+" 0 TEMP "+arr_size);
      
      System.out.println("MOVE TEMP "+temp_no+" 0");
      String z_temp=String.valueOf(temp_no);
      temp_no++;
      
      System.out.println("MOVE TEMP "+temp_no+" 1");
      String one_temp=String.valueOf(temp_no);
      temp_no++;
      
      System.out.println("MOVE TEMP "+temp_no+" 4");
      String two_temp=String.valueOf(temp_no);
      temp_no++;
      
      System.out.println("L"+label_no);
      String one_label=String.valueOf(label_no);
      label_no++;
      
      System.out.println("MOVE TEMP "+temp_no+" LE TEMP "+one_temp+" TEMP "+arr_size);
      String three_temp=String.valueOf(temp_no); 
      temp_no++;
      
      System.out.println("CJUMP TEMP "+three_temp+" L"+label_no);
      String two_label=String.valueOf(label_no);
      label_no++;
      
      System.out.println("MOVE TEMP "+temp_no+" PLUS TEMP "+arr_start+" TEMP "+two_temp);
      String four_temp=String.valueOf(temp_no); 
      temp_no++;
      
      System.out.println("HSTORE TEMP "+four_temp+" 0 TEMP "+z_temp);
      System.out.println("MOVE TEMP "+one_temp+" PLUS TEMP "+one_temp+" 1");
      System.out.println("MOVE TEMP "+two_temp+" PLUS TEMP "+two_temp+" 4");
      System.out.println("JUMP L"+one_label);
      System.out.println("L"+two_label);
      System.out.println("NOOP");
            
      _ret= (R) arr_start;
            
      n.f4.accept(this, argu);
      }
      return _ret;
   }

   /**
    * f0 -> "new"
    * f1 -> Identifier()
    * f2 -> "("
    * f3 -> ")"
    */
   public R visit(AllocationExpression n, A argu) {
		/* YOUR CODE HERE */

      R _ret=null;
      
      if(pass==0)
      {
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      n.f3.accept(this, argu);
      }
      else
      {
        if(debug)
        {
          System.out.println("in AllocationExpression n");
        }
      
        n.f0.accept(this, argu);
        pri_exp=false;
        
        String className=(String) n.f1.accept(this, argu);
        int class_size=4;
        int func_size=0;
        
        if(debug)
        {
          System.out.println("reached 1");
        }
        
        if(meth_offs.containsKey(className))
        {
          func_size+=4*meth_offs.get(className).size();
        }
        if(debug)
        {
          System.out.println(className+ " object function table allocated "+func_size+" bytes");
        } 
        
        if(debug)
        {
          System.out.println("reached 2");
        }
        
        if(vars_offs.containsKey(className))
        {
          class_size+=4*vars_offs.get(className).size();
        }
        if(debug)
        {
          System.out.println(className+ " object allocated "+class_size+" bytes");
        }  
        
        if(debug)
        {
          System.out.println("reached 3");
        }
           
        n.f2.accept(this, argu);
        n.f3.accept(this, argu);
        
        System.out.println("MOVE TEMP "+temp_no+" HALLOCATE "+func_size);  //temp_no has the address of function table
        String func_table=String.valueOf(temp_no);
        temp_no++;
        
        if(debug)
        {
          System.out.println("reached 4");
        }
        
        System.out.println("MOVE TEMP "+temp_no+" HALLOCATE "+class_size);  //temp_no has the address of class record
        String class_rec=String.valueOf(temp_no);               
        temp_no++; 
        
        if(debug)
        {
          System.out.println("reached 5");
        }
        
        //adding the address of functions to the function table
        if(meth_offs.containsKey(className))
        {
        HashMap<String,Integer> temp_map= new HashMap<String,Integer>();
        temp_map=meth_offs.get(className);
                
            for (Map.Entry<String,Integer> entry2 : temp_map.entrySet()) {
		//System.out.println(entry2.getKey()+":\n");
		String funcName=entry2.getKey();
		int offset=entry2.getValue();
		
		 String cc_class=className;
                 while(!cc_class.equals("1NULL"))
                 {
		    if(class_meth.containsKey(cc_class)&&class_meth.get(cc_class).containsKey(funcName))
                    {
		      break;
		    }
		    else
		    {
		      cc_class=class_parent.get(cc_class);
		    }
       	        }
        
		System.out.println("MOVE TEMP "+temp_no+" "+cc_class+"_"+funcName);
		System.out.println("HSTORE TEMP "+func_table+" "+offset+" TEMP "+temp_no);
		temp_no++;
		
            }
        }
        
        System.out.println("HSTORE TEMP "+class_rec+" 0 TEMP "+func_table);  //temp_no has the address of class record    
        temp_type.put(class_rec,className);
        
        if(debug4)
        {
          System.out.println("added "+class_rec+","+className+" to temp_type");
        }
        
        System.out.println("MOVE TEMP "+temp_no+" 0");
        
        if(debug5)
		      {
		        System.out.println("printed from allocation statement");
		      }
		      
        String zero_temp = String.valueOf(temp_no);
        temp_no++;
        
        HashMap<String,Integer> off_map = vars_offs.get(className);
        for (Map.Entry<String, Integer> set :
             off_map.entrySet()) {
 
            int offset2 = set.getValue();
            System.out.println("HSTORE TEMP "+class_rec+" "+offset2+" TEMP "+zero_temp);
        }
        
        _ret=(R) class_rec;
      }
      return _ret;
   }

   /**
    * f0 -> "!"
    * f1 -> Expression()
    */
   public R visit(NotExpression n, A argu) {
		/* YOUR CODE HERE */

      R _ret=null;
      if(pass==0)
      {
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      }
      else
      {
        n.f0.accept(this, argu);
        String t1= (String) n.f1.accept(this, argu);
                
        System.out.println("MOVE TEMP "+temp_no+" NE TEMP "+t1+" 1");
        _ret =(R) String.valueOf(temp_no);
        temp_no++;
      }
      return _ret;
   }

   /**
    * f0 -> "("
    * f1 -> Expression()
    * f2 -> ")"
    */
   public R visit(BracketExpression n, A argu) {
		/* YOUR CODE HERE */

      R _ret=null;
      if(pass==0)
      {
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      }
      else
      {
        n.f0.accept(this, argu);
        _ret = n.f1.accept(this, argu);
                
        n.f2.accept(this, argu);
      }
      return _ret;
   }

   /**
    * f0 -> Identifier()
    * f1 -> ( IdentifierRest() )*
    */
   public R visit(IdentifierList n, A argu) {
      R _ret=null;
      if(pass==0)
      {
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      }
      else
      {
        n.f0.accept(this, argu);
        n.f1.accept(this, argu);
      }
      return _ret;
   }

   /**
    * f0 -> ","
    * f1 -> Identifier()
    */
   public R visit(IdentifierRest n, A argu) {
      R _ret=null;
      if(pass==0)
      {
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      }
      else
      {
        n.f0.accept(this, argu);
        n.f1.accept(this, argu);
      }
      return _ret;
   }

}
