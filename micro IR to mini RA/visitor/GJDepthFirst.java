//
// Generated by JTB 1.3.2
//

package visitor;
import syntaxtree.*;
import java.util.*;

//import jdk.nashorn.internal.codegen.SpillObjectCreator;

class range
{
  public int start;
  public int end;
}

class named_range
{
  public String temp_num;
  public int start;
  public int end;
   
    // Comparator for sorting the list by start
    public static Comparator<named_range> range_comp = new Comparator<named_range>() {
  
        public int compare(named_range s1, named_range s2) 
        {  
            return s1.start - s2.start;
        }
    };
}

/**
 * Provides default methods which visit each node in the tree in depth-first
 * order.  Your visitors may extend this class.
 */
public class GJDepthFirst<R,A> implements GJVisitor<R,A> {
   //
   // Auto class visitors--probably don't need to be overridden.
   //
   
   public static HashMap<String,range> live_ranges = new HashMap<String,range>(); 
     
   public static HashMap<String,HashMap<String,Integer>> last_def = new HashMap<String,HashMap<String,Integer>>();     
   public static HashMap<String,HashMap<String,Integer>> last_use = new HashMap<String,HashMap<String,Integer>>();
    
   public static HashMap<String,HashMap<String,Integer>> label_map = new HashMap<String,HashMap<String,Integer>>(); 
   
      
   ArrayList<String> free_regs = new ArrayList<String>(0);
   HashMap<String,HashMap<String,String>> register = new HashMap<String,HashMap<String,String>>();
   ArrayList<named_range> intervals = new ArrayList<named_range>(0);
   ArrayList<named_range> active = new ArrayList<named_range>(0);

   ArrayList<String> methods = new ArrayList<String>(0);
   HashMap<String,Integer> method_args = new HashMap<String,Integer>(0);
   
   HashMap<String,Integer> max_call = new HashMap<String,Integer>(0);
   HashMap<String,Integer> stack_slots = new HashMap<String,Integer>(0);
   HashMap<String,HashMap<String,Integer>> label_lines = new HashMap<String,HashMap<String,Integer>>(0);
   HashMap<String,HashMap<String,Integer>> jump_lines = new HashMap<String,HashMap<String,Integer>>(0);
   
   HashMap<String,HashMap<String,Integer>> stack_loc = new HashMap<String,HashMap<String,Integer>>(0);
   HashMap<String,String> func_note = new HashMap<String,String>(0);
   
   int pass=1;
   int line_no=0;
   int label_no=1;
   int curr_func_start;
   
   boolean debug=false;
   boolean debug2=false;
   boolean debug3=false;
   
   String curr_func;
   boolean in_func_start=false;
   boolean in_call=false;
   boolean in_simple_exp=false;
   boolean in_temp=false;
   //boolean in_stmt_label=false;   
   boolean in_stmt=false;
   
   int arg_no=0;
   
   boolean debug4=false;
   boolean debug5=false;
   boolean debug6=false; //label_map
   boolean debug7=false; //label_lines, jump_lines
   
   boolean debug8=false;
   boolean debug9=false;
   boolean debug10=false;  //v1_used
   
   int spill_no=0;
   int n_call=0;
   int m_call=0;
   int f_slots=0;
   //int stack_loc=0;
   boolean added_for_call=false;
   
   boolean in_use=false;
   String spill_in_stack="NULL";
   //String spill_in_stack_2nd="NULL";
   
   boolean v1_used=false;
   
   public void print_active(String func)
   {
      for(int p=0;p<active.size();p++)
      {
        System.out.print("temp_num: "+active.get(p).temp_num+" start: "+active.get(p).start+" end: "+active.get(p).end+" allotted to "+register.get(func).get(active.get(p).temp_num)+" ");
      }
      System.out.println("");
   }
   
   public void free_regs_init()
   {
     free_regs.clear();
     free_regs.add("t9");
     free_regs.add("t8");
     free_regs.add("t7");
     free_regs.add("t6");
     free_regs.add("t5");
     free_regs.add("t4");
     free_regs.add("t3");
     free_regs.add("t2");     
     free_regs.add("t1");
     free_regs.add("t0");
     
     free_regs.add("s7");
     free_regs.add("s6");
     free_regs.add("s5");
     free_regs.add("s4");
     free_regs.add("s3");
     free_regs.add("s2");
     free_regs.add("s1");
     free_regs.add("s0");
     
     /*if(debug9)
     {
       System.out.println("after clearing free_regs is "+free_regs);
     }*/
     
   }
   
   public void interval_init(String func)
   {
     HashMap<String,Integer> defs = new HashMap<String,Integer>();
     HashMap<String,Integer> uses = new HashMap<String,Integer>();
     
     defs = last_def.get(func);
     uses = last_use.get(func);
     
     active.clear();
     intervals.clear();
     
     for (Map.Entry<String, Integer> entry3 : defs.entrySet()) 
     {      
        String this_temp = entry3.getKey();
        
        if(debug8)
        { 
          System.out.println("in interval init with func = "+func+" this_temp = "+this_temp);
        }
        
        named_range t_range = new named_range();
        t_range.temp_num = this_temp;
        t_range.start = entry3.getValue();
        
        if(uses.containsKey(this_temp))
        {
          t_range.end = uses.get(this_temp);
        }
        else
        {
          t_range.end = t_range.start+1;  
        }
        
        intervals.add(t_range);      
     }
     
     if(debug4)
     {
       System.out.println("intervals in the arraylist intervals before sorting and extending, in func "+func+": ");
       
       for(int p=0;p<intervals.size();p++)
       {
         System.out.println(intervals.get(p).temp_num+" start: "+intervals.get(p).start+" end: "+intervals.get(p).end);
       }
     }
     
     for (Map.Entry<String, Integer> entry4 : label_lines.get(func).entrySet()) 
     {      
        String label_name = entry4.getKey();
        int label_start = entry4.getValue();
                 
        if(!jump_lines.get(func).containsKey(label_name))
        {
          continue;
        } 
        
        int l_use = jump_lines.get(func).get(label_name);
        
        if(l_use<label_start)
        {
          continue;
        }     
               
        for(int r=0;r<intervals.size();r++)
        {
          if(intervals.get(r).start<label_start && intervals.get(r).end<=l_use && intervals.get(r).end>label_start)  
          {
                int x = intervals.get(r).end;
		intervals.get(r).end= l_use;  
		
		if(debug4)
		{
		  System.out.println("in func "+func+" changed the end of temp "+intervals.get(r).temp_num+" from "+x+" to "+l_use);
		}
		//intervals.get(r).start= ;
          }
        }
     }    
     
     //sort the intervals in increasing order of start line_no
     Collections.sort(intervals,named_range.range_comp);       
     
     if(debug4)
     {
       System.out.println("intervals in the arraylist intervals after sorting and extending: ");
       
       for(int p=0;p<intervals.size();p++)
       {
         System.out.println(intervals.get(p).temp_num+" start: "+intervals.get(p).start+" end: "+intervals.get(p).end);
       }
     } 
     
   }   
   
   public void expire_old_int(String func, named_range i)
   {
     /*if(debug9)
         {
           System.out.println("active in expire old int: ");
           print_active();
         }*/
         
     int remove_index=-1;
     int j;
     for(j=0;j<active.size();j++)
     {
       if(active.get(j).end >= i.start)  
       {
          if(remove_index>=0)
          {
             for(int k=0;k<=remove_index;k++)
             {
                active.remove(0);
             }
          }  
          return;
       }      
       
       remove_index++;
       
       /*if(debug9)
       {
         System.out.println("\n\nbefore adding to free pool: ****************************************\n"+free_regs);
       }*/
       
       free_regs.add(register.get(func).get(active.get(j).temp_num));
       
       /*if(debug9)
       {
         System.out.println("\n\nafter added to free pool: *********************************************\n"+free_regs);
       }*/
     }  
     
     if(j==active.size())
     {
        if(remove_index>=0)
        {
           for(int k=0;k<=remove_index;k++)
           {
              active.remove(0);
           }
        }  
        return;
     } 
          
   }
   
   public void spill_at_int(String func, named_range i)
   {
     /*if(debug9)
         {
           System.out.println("active in spill t int: ");
           print_active();
         }*/
         
     int last_index = active.size()-1;
     named_range spill = new named_range();
     spill=active.get(last_index);
     
     if(spill.end>i.end)
     {
       register.get(func).put(i.temp_num,register.get(func).get(spill.temp_num));
       register.get(func).put(spill.temp_num, "stack");
       active.remove(last_index);
       
       int prev = stack_slots.get(func);
       prev++;
       stack_slots.put(func,prev);
       func_note.put(func,"SPILLED");
       
       //add i to active
       //int i_index=0;
       
       if(active.size()==0)
       {
         active.add(i);
       }
       else if(i.end<active.get(0).end)
       {
         active.add(0,i);
       }
       else if(i.end>=active.get(active.size()-1).end)
       {
         active.add(i);
       }
       else
       {
         for(int k=1;k<active.size();k++)
         {
           if(i.end>=active.get(k-1).end && i.end<=active.get(k).end)
           {
             active.add(k,i);
             break;
           }
         }
       }  
       
       /*if(debug9)
         { 
           System.out.println("active after adding to active in spill at int : ");
           print_active();          
           System.out.println("free_regs after adding to active in spill at int : "+free_regs);
         }   */
     }
     else
     {
        register.get(func).put(i.temp_num,"stack");
        
        int prev = stack_slots.get(func);
        prev++;
        stack_slots.put(func,prev);
        func_note.put(func,"SPILLED");
     }
   }
   
   public void reg_alloc(String func)
   {
     for(int p=0;p<intervals.size();p++)
     {
       named_range curr = new named_range();              
       curr = intervals.get(p);
       
       if(debug5)
       {
         System.out.println("curr = "+curr.temp_num+" "+curr.start+" "+curr.end);
       }
       
       expire_old_int(func,curr);
       
       if(active.size()==18) 
       {
         /*if(debug9)
         {
           System.out.println("active in reg_alloc if part: ");
           print_active(func);
         }*/
         
         spill_at_int(func,curr);
       }
       else
       {
         if(debug9)
         {
           System.out.println("active in reg_alloc else part: ");
           print_active(func);
           System.out.println("free_regs: "+free_regs+"\n\n");
         }
         
         int l_index = free_regs.size()-1;
         register.get(func).put(curr.temp_num,free_regs.get(l_index));
         free_regs.remove(l_index);
         
         //add curr to active
         if(active.size()==0)
         {
           active.add(curr);
         }
         else if(curr.end<active.get(0).end)
         {
           active.add(0,curr);
         }
         else if(curr.end>=active.get(active.size()-1).end)
         {
           active.add(curr);
         }
         else
         {
           for(int k=1;k<active.size();k++)
           {
             if(curr.end>=active.get(k-1).end && curr.end<=active.get(k).end)
             {
               active.add(k,curr);
               break;
             }
           }
         }
         
         if(debug9)
         { 
           System.out.println("active after adding to active in reg_alloc at int : ");
           print_active(func);          
           System.out.println("free_regs after adding to active in reg_alloc at int : "+free_regs+"\n\n");
         }
       }
     }
   }
        
   public void reg_alloc_allfuncs()
   {
     for (Map.Entry<String, HashMap<String, Integer>> entry2 : last_def.entrySet()) 
     {
        //System.out.println(entry2.getKey()+":\n");
        String func_name = entry2.getKey();
                
        HashMap<String,String> t_map = new HashMap<String,String>();  
        register.put(func_name,t_map);
        free_regs_init();
        
        //extend_intervals(func_name);
        
        interval_init(func_name);
        
        if(debug9)
         {
           System.out.println("active just before calling reg_alloc for function "+func_name+" : ");
           print_active(func_name);
         }
         
        reg_alloc(func_name);
     }
   }
   
   public void print_label_ranges()
   {
      System.out.println("\n\nThe label ranges are:******************************************************");
     
      System.out.println("label_lines: "+label_lines);
      System.out.println("jump_lines: "+jump_lines);
   }
   
   public void print_live_ranges()
   {
      System.out.println("\n\nThe live ranges are:******************************************************");
      /*for (Map.Entry<String, range> entry2 : live_ranges.entrySet()) {
          System.out.println(entry2.getKey()+":\n");
          //ArrayList<range> childArray = entry2.getValue();
          range child = new range();
          child = entry2.getValue();
          System.out.println(child.start+" "+child.end);
      }*/
      
      if(debug2)
      {
        System.out.println(last_def);
        System.out.println(last_use);
      }
      
      for (Map.Entry<String, HashMap<String, Integer>> entry2 : last_def.entrySet()) {
        System.out.println(entry2.getKey()+":\n");
        Map<String, Integer> childMap = entry2.getValue();
        //System.out.println(childMap);
        
        for (Map.Entry<String, Integer> entry3 : childMap.entrySet()) {
          System.out.println(entry3.getKey()+": "+entry3.getValue());
          
          if(last_use.get(entry2.getKey()).containsKey(entry3.getKey()))  
          {
            System.out.println(last_use.get(entry2.getKey()).get(entry3.getKey()));
          }        
        }
    }
   }
   
   public void print_reg_allocs()
   {
     System.out.println("\n\nThe reg allocs are:******************************************************");
     for (Map.Entry<String, HashMap<String, String>> entry2 : register.entrySet()) {
        System.out.println(entry2.getKey()+":\n");
        Map<String, String> childMap = entry2.getValue();
        
        for (Map.Entry<String, String> entry3 : childMap.entrySet()) {
          System.out.println(entry3.getKey()+": "+entry3.getValue());               
        }
    }
   }
	
   public R visit(NodeList n, A argu) {
      R _ret=null;
      int _count=0;
      for ( Enumeration<Node> e = n.elements(); e.hasMoreElements(); ) {
         e.nextElement().accept(this,argu);
         _count++;
      }
      return _ret;
   }

   public R visit(NodeListOptional n, A argu) {
      if ( n.present() ) {
         R _ret=null;
         int _count=0;
         for ( Enumeration<Node> e = n.elements(); e.hasMoreElements(); ) {
            e.nextElement().accept(this,argu);
            _count++;
         }
         return _ret;
      }
      else
         return null;
   }

   public R visit(NodeOptional n, A argu) {
      if ( n.present() )
         return n.node.accept(this,argu);
      else
         return null;
   }

   public R visit(NodeSequence n, A argu) {
      R _ret=null;
      int _count=0;
      for ( Enumeration<Node> e = n.elements(); e.hasMoreElements(); ) {
         e.nextElement().accept(this,argu);
         _count++;
      }
      return _ret;
   }

   public R visit(NodeToken n, A argu) { return (R)n.tokenImage; }

   /**
    * f0 -> Label()
    * f1 -> "["
    * f2 -> IntegerLiteral()
    * f3 -> "]"
    * f4 -> StmtExp()
    */
   public R visit(Procedure n, A argu) {
      R _ret=null;
      
      if(pass==1)
      {
              in_func_start=true;
	      String func_name = (String) n.f0.accept(this, argu); 
	      in_func_start=false;
	      curr_func=func_name;
	      curr_func_start=line_no+1;  //next line
	      methods.add(func_name);
	      //spill_no=0;
	      f_slots=0;
	      m_call=0;
	      added_for_call=false;
	      
	      if(debug)
	      {
	        System.out.println("curr_func set to "+curr_func);
	      }  	           
	      	           
	      HashMap<String,Integer> temp_map = new HashMap<String,Integer>(0);
	      label_map.put(curr_func,temp_map);
	      
	      HashMap<String,Integer> temp_map4 = new HashMap<String,Integer>(0);
	      label_lines.put(curr_func,temp_map4);	      
	      HashMap<String,Integer> temp_map5 = new HashMap<String,Integer>(0);
	      jump_lines.put(curr_func,temp_map5);
	      
	      HashMap<String,Integer> temp_map6 = new HashMap<String,Integer>(0);
	      stack_loc.put(curr_func,temp_map6);
	           
	      func_note.put(curr_func,"NOTSPILLED");
	      
	      HashMap<String,Integer> temp_map2= new HashMap<String,Integer>(0);
	      last_def.put(curr_func,temp_map2);	      
	      HashMap<String,Integer> temp_map3= new HashMap<String,Integer>(0);
	      last_use.put(curr_func,temp_map3);
	      
	      n.f1.accept(this, argu);
	      String n_arg = (String) n.f2.accept(this, argu);    
	      method_args.put(func_name,Integer.valueOf(n_arg));
	      
	      int no_args = Integer.valueOf(n_arg);
	      
	      for(int q=0;q<4&&q<no_args;q++)   //
	      {
	        String arg_temp = String.valueOf(q);
	        last_def.get(curr_func).put(arg_temp,curr_func_start);
	      }
	      
	      for(int l=4;l<no_args;l++)
	      {
	        String l1=String.valueOf(l);	        
	        stack_loc.get(curr_func).put(l1,l-4);  
	      }
	      
	      if(no_args>4)
	      {
	        f_slots+=no_args-4;
	        //func_note.put(curr_func,"SPILLED");
	      }      
	      
	      n.f3.accept(this, argu);
	      n.f4.accept(this, argu);
	      
	      max_call.put(curr_func,m_call);
	      stack_slots.put(curr_func,f_slots);
      }
      else
      {
              in_func_start=true;
              String func_name = (String) n.f0.accept(this, argu); 
              in_func_start=false; 
              curr_func=func_name;
	      //curr_func_start=line_no+1;  //
	      
	      if(method_args.get(curr_func)<=4)
	      {
	        spill_no=0;
	      }
	      else
	      {
	        spill_no=method_args.get(curr_func)-4;
	      }
	           	      	      
	      n.f1.accept(this, argu);	      	      
	      String n_arg = (String) n.f2.accept(this, argu);    
	      n.f3.accept(this, argu);
	      
	      System.out.print(func_name+" ["+n_arg+"] ");	      
	      System.out.print("["+stack_slots.get(curr_func));
	      System.out.print("] ["+max_call.get(curr_func));
	      System.out.println("]");
	      	      
	      n.f4.accept(this, argu);
	      System.out.println("// "+func_note.get(curr_func));
      }
      
      return _ret;
   }

//
   // User-generated visitor methods below
   //

   /**
    * f0 -> "MAIN"
    * f1 -> StmtList()
    * f2 -> "END"
    * f3 -> ( Procedure() )*
    * f4 -> <EOF>
    */
   public R visit(Goal n, A argu) {
      R _ret=null;
      
	      n.f0.accept(this, argu);
	      curr_func="MAIN";
	      curr_func_start=line_no+1;  //next line
	      methods.add("MAIN");
	      method_args.put("MAIN",0);
	      //spill_no=0;
	      f_slots=0;
	      m_call=0;
	      added_for_call=false;
	      
	      if(debug)
	      {
	        System.out.println("curr_func set to "+curr_func);
	      }  
	      
	      HashMap<String,Integer> temp_map = new HashMap<String,Integer>(0);
	      label_map.put(curr_func,temp_map);
	      
	      HashMap<String,Integer> temp_map4 = new HashMap<String,Integer>(0);
	      label_lines.put(curr_func,temp_map4);	      
	      HashMap<String,Integer> temp_map5 = new HashMap<String,Integer>(0);
	      jump_lines.put(curr_func,temp_map5);
	      
	      HashMap<String,Integer> temp_map6 = new HashMap<String,Integer>(0);
	      stack_loc.put(curr_func,temp_map6);
	      
	      func_note.put(curr_func,"NOTSPILLED");
	      
	      HashMap<String,Integer> temp_map2= new HashMap<String,Integer>(0);
	      last_def.put(curr_func,temp_map2);	      
	      HashMap<String,Integer> temp_map3= new HashMap<String,Integer>(0);
	      last_use.put(curr_func,temp_map3);
	      
	      n.f1.accept(this, argu);
	      n.f2.accept(this, argu); 
	      max_call.put(curr_func,m_call);
	      stack_slots.put(curr_func,f_slots);
	           
	      n.f3.accept(this, argu);
	      n.f4.accept(this, argu);   
	      
	      if(debug)
	      {
	        print_live_ranges();
	      }
	      
	      reg_alloc_allfuncs();
	      
	      if(debug4)
	      {
	        print_reg_allocs();
	      }
	      
	      if(debug7)
	      {
	        print_label_ranges();
	      }
	      
	      pass=2;
	      line_no=0;
	      
	      if(debug6)
	      {
	        System.out.println(label_map);
	      }
	      
	      n.f0.accept(this, argu);
	      curr_func="MAIN";
	      //curr_func_start=line_no+1;  //
	      spill_no=0;
	      
	      System.out.print("MAIN [0] ["+stack_slots.get(curr_func));
	      System.out.print("] ["+max_call.get(curr_func));
	      System.out.println("]");
	      
	      n.f1.accept(this, argu);
	      n.f2.accept(this, argu);  
	      System.out.println("END\n");
	      System.out.println("// "+func_note.get(curr_func));
	      	          
	      n.f3.accept(this, argu);
	      n.f4.accept(this, argu);
      
      return _ret;
   }

   /**
    * f0 -> ( ( Label() )? Stmt() )*
    */
   public R visit(StmtList n, A argu) {
      R _ret=null;
      if(pass==1)
      {
        //in_stmt_label=true;
        n.f0.accept(this, argu);
        //in_stmt_label=false;
      }
      else
      {
        //in_stmt_label=true;
        n.f0.accept(this, argu);
        //in_stmt_label=false;
      }
      
      return _ret;
   }

   /**
    * f0 -> NoOpStmt()
    *       | ErrorStmt()
    *       | CJumpStmt()
    *       | JumpStmt()
    *       | HStoreStmt()
    *       | HLoadStmt()
    *       | MoveStmt()
    *       | PrintStmt()
    */
   public R visit(Stmt n, A argu) {
      R _ret=null;  
      
      if(pass==1)
      {
        line_no++;
        
        if(debug3)
        {
          System.out.println("line_no: "+line_no);
        }        
        
        in_stmt=true;
        n.f0.accept(this, argu);   
        in_stmt=false;
      }
      else
      {       
        in_stmt=true;
        n.f0.accept(this, argu); 
        in_stmt=false;
        
        System.out.println("");
        v1_used=false;
        
        if(debug10)
        {
          System.out.println("v1_used=false");
        }
        
      }
         
      return _ret;
   }

   /**
    * f0 -> "NOOP"
    */
   public R visit(NoOpStmt n, A argu) {
      R _ret=null;
      
      if(pass==1)
      {
        n.f0.accept(this, argu);
      }
      else
      {
        n.f0.accept(this, argu);
        System.out.print("NOOP");
      }
      
      return _ret;
   }

   /**
    * f0 -> "ERROR"
    */
   public R visit(ErrorStmt n, A argu) {
      R _ret=null;
      
      if(pass==1)
      {
      n.f0.accept(this, argu);
      }
      else
      {
        n.f0.accept(this, argu);
        System.out.print("ERROR");
      }
      
      return _ret;
   }

   /**
    * f0 -> "CJUMP"
    * f1 -> Temp()
    * f2 -> Label()
    */
   public R visit(CJumpStmt n, A argu) {
      R _ret=null;
      
      if(pass==1)
      {
	      n.f0.accept(this, argu);
	      String temp_no = (String) n.f1.accept(this, argu);
	      
	      last_use.get(curr_func).put(temp_no,line_no);
	      if(!last_def.get(curr_func).containsKey(temp_no))
              {
                last_def.get(curr_func).put(temp_no,curr_func_start);
              }	
	      
	      if(debug2)
	      {
	        System.out.println("last_use: "+last_use);
	      }
	      
	      String label_name = (String) n.f2.accept(this, argu);
	      
	      jump_lines.get(curr_func).put(label_name,line_no);
      }
      else
      {
       	      n.f0.accept(this, argu);   
       	      in_use=true;   	      
	      String p2 = (String) n.f1.accept(this, argu);
	      in_use=false;
	      
	      String p3 = (String) n.f2.accept(this, argu);
	      
	      System.out.print("CJUMP "+p2+p3);	      
      }
      
      return _ret;
   }

   /**
    * f0 -> "JUMP"
    * f1 -> Label()
    */
   public R visit(JumpStmt n, A argu) {
      R _ret=null;
      
      if(pass==1)
      {
        n.f0.accept(this, argu);
        String label_name = (String) n.f1.accept(this, argu);
        
        jump_lines.get(curr_func).put(label_name,line_no);
      }
      else
      {
        n.f0.accept(this, argu);        
        String p2 = (String) n.f1.accept(this, argu);
                
        System.out.print("JUMP "+p2); 
      }
      
      return _ret;
   }

   /**
    * f0 -> "HSTORE"
    * f1 -> Temp()
    * f2 -> IntegerLiteral()
    * f3 -> Temp()
    */
   public R visit(HStoreStmt n, A argu) {
      R _ret=null;
      
      if(pass==1)
      {
	      n.f0.accept(this, argu);
	      String dest = (String) n.f1.accept(this, argu);
	      n.f2.accept(this, argu);
	      String src = (String) n.f3.accept(this, argu);
	      	      
	      last_use.get(curr_func).put(dest,line_no);
	      if(!last_def.get(curr_func).containsKey(dest))
              {
                last_def.get(curr_func).put(dest,curr_func_start);
              }	
              
              
	      last_use.get(curr_func).put(src,line_no);
	      if(!last_def.get(curr_func).containsKey(src))
              {
                last_def.get(curr_func).put(src,curr_func_start);
              }	
	      
	      if(debug2)
	      {
	      	  System.out.println("def before adding");
	      	  System.out.println(last_def);
	      }	  
	                   
	      /*if(!last_def.get(curr_func).containsKey(dest))	     
	      {
	        last_def.get(curr_func).put(dest,line_no);
	      }
	      else
	      {
	        last_use.get(curr_func).put(dest,line_no);
	      }*/
	      	        
	      if(debug2)
	      {
	      	  System.out.println("def after adding");
	      	  System.out.println(last_def);
	      }
	      
      }
      else
      {
      	      n.f0.accept(this, argu);    	
      	      in_use=true;      
	      String p2 = (String) n.f1.accept(this, argu);
	      in_use=false;
	      
	      in_use=true;
	      String p3 = (String) n.f2.accept(this, argu);
	      in_use=false;
	      
	      String p4 = (String) n.f3.accept(this, argu);
	      	      
	      System.out.print("HSTORE "+p2+p3+p4);
      }
      return _ret;
   }

   /**
    * f0 -> "HLOAD"
    * f1 -> Temp()
    * f2 -> Temp()
    * f3 -> IntegerLiteral()
    */
   public R visit(HLoadStmt n, A argu) {
      R _ret=null;
      
      if(pass==1)
      {
	      n.f0.accept(this, argu);
	      String dest = (String) n.f1.accept(this, argu);
	      String src = (String) n.f2.accept(this, argu);
	      n.f3.accept(this, argu);
	      	      
	      last_use.get(curr_func).put(src,line_no);
	      if(!last_def.get(curr_func).containsKey(src))
              {
                last_def.get(curr_func).put(src,curr_func_start);
              }	
	      
	      if(debug2)
	      {
	      	  System.out.println("def before adding");
	      	  System.out.println(last_def);
	      }	 
	      
	      if(!last_def.get(curr_func).containsKey(dest))	     
	      {
	        last_def.get(curr_func).put(dest,line_no);	        
	      }
	      else
	      {
	        last_use.get(curr_func).put(dest,line_no);
	      }
	      
	      if(debug2)
	      {
	      	  System.out.println("def after adding");
	      	  System.out.println(last_def);
	      }	 
	        
	      if(debug2)
	      	  System.out.println("addede to def");
      }
      else
      {
      	      n.f0.accept(this, argu);      	            	      
	      String p2 = (String) n.f1.accept(this, argu);
	      
	      in_use=true;
	      String p3 = (String) n.f2.accept(this, argu);
	      in_use=false;
	      String p4 = (String) n.f3.accept(this, argu);
	      	      
	      System.out.print("HLOAD "+p2+p3+p4);
	      
	      if(!spill_in_stack.equals("NULL"))
	      {
	        int t_pos = stack_loc.get(curr_func).get(spill_in_stack);
	        System.out.print("\nASTORE SPILLEDARG "+t_pos+" v1");    //
	        spill_in_stack="NULL";
	      }
      }
      
      return _ret;
   }

   /**
    * f0 -> "MOVE"
    * f1 -> Temp()
    * f2 -> Exp()
    */
   public R visit(MoveStmt n, A argu) {
      R _ret=null;
      
      if(pass==1)
      {           
              if(debug2)
	      {
	        System.out.println("in move start, with last_def = "+last_def+" in line no = "+line_no);
	      }
	         
	      n.f0.accept(this, argu);
	      String dest = (String) n.f1.accept(this, argu);
	      n.f2.accept(this, argu);
	      
	      if(debug2)
	      {
	        System.out.println("in move with dest = "+dest+" in line no "+line_no);
	      }
	      
	      if(debug2)
	      {
	      	  System.out.println("def before adding");
	      	  System.out.println(last_def);
	      	  
	      	  System.out.println("is this temp already in last_def? "+(last_def.get(curr_func).containsKey(dest)));
	      }	 
	      
	      if(!last_def.get(curr_func).containsKey(dest))	     
	      {
	        
	        last_def.get(curr_func).put(dest,line_no);	        
	      }
	      else
	      {
	        last_use.get(curr_func).put(dest,line_no);
	      }
	      
	      if(debug2)
	      {
	      	  System.out.println("def after adding");
	      	  System.out.println(last_def);
	      }	 
	      
      }
      else
      {
              n.f0.accept(this, argu);             
	      String p2 = (String) n.f1.accept(this, argu);      
	      String p3 = (String) n.f2.accept(this, argu);
	      
	      System.out.print("MOVE "+p2+p3);     
	      
	      if(!spill_in_stack.equals("NULL"))
	      {
	        int t_pos = stack_loc.get(curr_func).get(spill_in_stack);
	        System.out.print("\nASTORE SPILLEDARG "+t_pos+" v1");    //
	        spill_in_stack="NULL";
	      }   	      
      }
      return _ret;
   }

   /**
    * f0 -> "PRINT"
    * f1 -> SimpleExp()
    */
   public R visit(PrintStmt n, A argu) {
      R _ret=null;
      
      if(pass==1)
      {
        n.f0.accept(this, argu);
        n.f1.accept(this, argu);                 	
      }
      else
      {
        n.f0.accept(this, argu);               
        String p2 = (String) n.f1.accept(this, argu);     
        
        System.out.print("PRINT "+p2);           
      }
          
      return _ret;
   }

   /**
    * f0 -> Call()
    *       | HAllocate()
    *       | BinOp()
    *       | SimpleExp()
    */
   public R visit(Exp n, A argu) {
      R _ret=null;
      _ret = n.f0.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "BEGIN"
    * f1 -> StmtList()
    * f2 -> "RETURN"
    * f3 -> SimpleExp()
    * f4 -> "END"
    */
   public R visit(StmtExp n, A argu) {
      R _ret=null;
      
      if(pass==1)
      {
	      n.f0.accept(this, argu);
	      
	      f_slots+=8;
	      
	      n.f1.accept(this, argu);
	      n.f2.accept(this, argu);
	      n.f3.accept(this, argu);
	      n.f4.accept(this, argu);
	      //f_slots-=8;
      }
      else
      {
              n.f0.accept(this, argu);
              
              //spill_no=method_args.get(curr_func)-4;
                            
              int spill_save = spill_no;
              System.out.println("ASTORE SPILLEDARG "+spill_no+" s0"); spill_no++;
              System.out.println("ASTORE SPILLEDARG "+spill_no+" s1"); spill_no++;
              System.out.println("ASTORE SPILLEDARG "+spill_no+" s2"); spill_no++;
              System.out.println("ASTORE SPILLEDARG "+spill_no+" s3"); spill_no++;
              System.out.println("ASTORE SPILLEDARG "+spill_no+" s4"); spill_no++;
              System.out.println("ASTORE SPILLEDARG "+spill_no+" s5"); spill_no++;
              System.out.println("ASTORE SPILLEDARG "+spill_no+" s6"); spill_no++;
              System.out.println("ASTORE SPILLEDARG "+spill_no+" s7"); spill_no++;
              	      
	      for(int q=0;q<method_args.get(curr_func)&&q<4;q++)   //
	      {
	        String rname = String.valueOf(q);
	        String tr;	        
	        if(register.get(curr_func).containsKey(rname))
	        {
	          tr = register.get(curr_func).get(rname);
	          
	          if(tr.equals("stack"))
	          {  
	             
	             if(!stack_loc.get(curr_func).containsKey(rname))
		     {
			stack_loc.get(curr_func).put(rname,spill_no);
			spill_no++;			  
		     }
		     
		     int pos = stack_loc.get(curr_func).get(rname);
		     
	             System.out.println("MOVE v1 a"+q);
		     System.out.println("ASTORE SPILLEDARG "+pos+" v1"); 
	                        
	          }
	          else
	          {
	             System.out.println("MOVE "+tr+" a"+q);
	          }
	        }
	        else
	        {
	          tr = "v1 ";  //
	          System.out.println("MOVE "+tr+" a"+q);
	        }	        
	        
	      }
	      	      
	      n.f1.accept(this, argu);
	      n.f2.accept(this, argu);
	      String ret_exp = (String) n.f3.accept(this, argu);
	      n.f4.accept(this, argu);
	      
	      System.out.println("MOVE v0 "+ret_exp);
	      
	      System.out.println("ALOAD s0 SPILLEDARG "+spill_save); spill_save++; spill_no--;
	      System.out.println("ALOAD s1 SPILLEDARG "+spill_save); spill_save++; spill_no--;
	      System.out.println("ALOAD s2 SPILLEDARG "+spill_save); spill_save++; spill_no--;
	      System.out.println("ALOAD s3 SPILLEDARG "+spill_save); spill_save++; spill_no--;
	      System.out.println("ALOAD s4 SPILLEDARG "+spill_save); spill_save++; spill_no--;
	      System.out.println("ALOAD s5 SPILLEDARG "+spill_save); spill_save++; spill_no--;
	      System.out.println("ALOAD s6 SPILLEDARG "+spill_save); spill_save++; spill_no--;
	      System.out.println("ALOAD s7 SPILLEDARG "+spill_save); spill_save++; spill_no--;	      
	      
	      System.out.println("END\n");
      }
      
      return _ret;
   }

   /**
    * f0 -> "CALL"
    * f1 -> SimpleExp()
    * f2 -> "("
    * f3 -> ( Temp() )*
    * f4 -> ")"
    */
   public R visit(Call n, A argu) {
      R _ret=null;
      
      if(pass==1)
      {
	      n.f0.accept(this, argu);
	      
	      if(!added_for_call)
	      {
	        f_slots+=10;
	        added_for_call=true;
	      }
	        
	      in_simple_exp=true;	      
	      n.f1.accept(this, argu);
	      in_simple_exp=false;
	      
	      n.f2.accept(this, argu);
	      
	      n_call=0;
	      in_call=true;	      
	      n.f3.accept(this, argu);
	      in_call=false;
	      
	      /*if(n_call>4)
	      {
	        f_slots+=n_call-4;
	      }*/
	      
	      if(n_call>m_call)
	      {
	        m_call=n_call;
	      }
	            
	      n.f4.accept(this, argu);
      }
      else
      {
              int spill_save = spill_no;
              
              System.out.println("ASTORE SPILLEDARG "+spill_no+" t0"); spill_no++;
              System.out.println("ASTORE SPILLEDARG "+spill_no+" t1"); spill_no++;
              System.out.println("ASTORE SPILLEDARG "+spill_no+" t2"); spill_no++;
              System.out.println("ASTORE SPILLEDARG "+spill_no+" t3"); spill_no++;
              System.out.println("ASTORE SPILLEDARG "+spill_no+" t4"); spill_no++;
              System.out.println("ASTORE SPILLEDARG "+spill_no+" t5"); spill_no++;
              System.out.println("ASTORE SPILLEDARG "+spill_no+" t6"); spill_no++;
              System.out.println("ASTORE SPILLEDARG "+spill_no+" t7"); spill_no++;
              System.out.println("ASTORE SPILLEDARG "+spill_no+" t8"); spill_no++;
              System.out.println("ASTORE SPILLEDARG "+spill_no+" t9"); spill_no++;
                            
              n.f0.accept(this, argu);
	      String ctno = (String) n.f1.accept(this, argu);
	      n.f2.accept(this, argu);
	      
	      in_call=true; in_use=true;
	      arg_no=0;
	      n.f3.accept(this, argu);
	      in_call=false; in_use=false;
	      
	      System.out.println("CALL "+ctno);
	      
	      n.f4.accept(this, argu);
	      
	      System.out.println("ALOAD t0 SPILLEDARG "+spill_save); spill_save++; spill_no--;
	      System.out.println("ALOAD t1 SPILLEDARG "+spill_save); spill_save++; spill_no--;
	      System.out.println("ALOAD t2 SPILLEDARG "+spill_save); spill_save++; spill_no--;
	      System.out.println("ALOAD t3 SPILLEDARG "+spill_save); spill_save++; spill_no--;
	      System.out.println("ALOAD t4 SPILLEDARG "+spill_save); spill_save++; spill_no--;
	      System.out.println("ALOAD t5 SPILLEDARG "+spill_save); spill_save++; spill_no--;
	      System.out.println("ALOAD t6 SPILLEDARG "+spill_save); spill_save++; spill_no--;
	      System.out.println("ALOAD t7 SPILLEDARG "+spill_save); spill_save++; spill_no--;
	      System.out.println("ALOAD t8 SPILLEDARG "+spill_save); spill_save++; spill_no--;
	      System.out.println("ALOAD t9 SPILLEDARG "+spill_save); spill_save++; spill_no--;
	      	      
	      String t_ret = "v0 ";
	      _ret = (R) t_ret;
      }
      
      return _ret;
   }

   /**
    * f0 -> "HALLOCATE"
    * f1 -> SimpleExp()
    */
   public R visit(HAllocate n, A argu) {
      R _ret=null;
      
      if(pass==1)
      {
              if(debug2)
	      {
	        System.out.println("in HAllocate");  
	        System.out.println("last_def= "+last_def);  
	      }
	      
	      n.f0.accept(this, argu);
	      
	      if(debug2)
	      {
	        System.out.println("on hallocate");
	      }
	      
	      in_simple_exp=true;
	      n.f1.accept(this, argu);
	      in_simple_exp=false;
	      
	      if(debug2)
	      {
	        System.out.println("in HAllocate end\n\n");  
	        System.out.println("last_def= "+last_def);  
	      }
      }
      else
      {
      	      n.f0.accept(this, argu);
      	      //System.out.print("HAllocate ");
      	      
      	      String p2 = (String) n.f1.accept(this, argu);  
      	      
      	      String t_ret = "HALLOCATE "+p2;
      	      _ret = (R) t_ret;    	      
      }
      
      return _ret;
   }

   /**
    * f0 -> Operator()
    * f1 -> Temp()
    * f2 -> SimpleExp()
    */
   public R visit(BinOp n, A argu) {
      R _ret=null;
      
      if(pass==1)
      {
	      n.f0.accept(this, argu);
	      	     
	      String src = (String) n.f1.accept(this, argu); 
              last_use.get(curr_func).put(src,line_no); 
              
              if(!last_def.get(curr_func).containsKey(src))
              {
                last_def.get(curr_func).put(src,curr_func_start);
              }	     
	        
	      in_simple_exp=true;
	      n.f2.accept(this, argu);
	      in_simple_exp=false;	           
      }
      else
      {
              String p1 = (String) n.f0.accept(this, argu);
              
              in_use=true;
	      String p2 = (String) n.f1.accept(this, argu);
	      in_use=false;
	      	            
	      String p3 = (String) n.f2.accept(this, argu);
	      
	      String t_ret = p1+p2+p3;
	      _ret = (R) t_ret;
	      //System.out.println("");
      }
      
      return _ret;
   }

   /**
    * f0 -> "LE"
    *       | "NE"
    *       | "PLUS"
    *       | "MINUS"
    *       | "TIMES"
    *       | "DIV"
    */
   public R visit(Operator n, A argu) {
      R _ret=null;
      
      if(pass==1)
      {
      n.f0.accept(this, argu);
      }
      else
      {
        String op = (String) n.f0.accept(this, argu);
        //System.out.print(op+" ");   
        String t_ret = op+" ";
        _ret = (R) t_ret;     
      }
      return _ret;
   }

   /**
    * f0 -> Temp()
    *       | IntegerLiteral()
    *       | Label()
    */
   public R visit(SimpleExp n, A argu) {
      R _ret=null;
      
      if(pass==1)
      {
       	      if(debug2)
	      {
	        System.out.println("in simple exp");  
	        System.out.println("last_def= "+last_def);  
	      }        
	        
        in_simple_exp=true;
        n.f0.accept(this, argu);
        in_simple_exp=false;
        
        if(debug2)
	{
	  System.out.println("in simple exp end\n\n");  
	  System.out.println("last_def= "+last_def);  
	}
      }
      else
      {
        in_use=true;
        _ret = n.f0.accept(this, argu);
        in_use=false;
      }
      
      return _ret;
   }

   /**
    * f0 -> "TEMP"
    * f1 -> IntegerLiteral()
    */
   public R visit(Temp n, A argu) {
      R _ret=null;
      
      if(pass==1)
      {
              if(debug2)
	      {
	        System.out.println("in temp");  
	        System.out.println("last_def= "+last_def);  
	      }
	        
	      n.f0.accept(this, argu);
	      
	      if(debug2)
	      {
	        System.out.println("in temp after f0");  
	        System.out.println("last_def= "+last_def);  
	      }
	      
	      String temp_no = (String) n.f1.accept(this, argu);
	      
	      if(debug2)
	      {
	        System.out.println("in temp after f1");  
	        System.out.println("last_def= "+last_def);  
	      }
	      
	      if(in_simple_exp||in_call)
	      {
	        last_use.get(curr_func).put(temp_no,line_no); 
	        
	        if(debug2)
	        {
	          System.out.println("last use: "+last_use);
	        }
	        
	        if(!last_def.get(curr_func).containsKey(temp_no))
                {
                  last_def.get(curr_func).put(temp_no,curr_func_start);
                }	
	      }
	      
	      if(debug2)
	      {
	        System.out.println("in temp end\n\n");  
	        System.out.println("last_def= "+last_def);  
	      }
	      
	      if(in_call)
	      {
	        n_call++;
	      }
	      
	      _ret = (R) temp_no; 
      }
      else
      {
              n.f0.accept(this, argu);
              
              in_temp=true;
	      String tno = (String) n.f1.accept(this, argu);
	      String rno="";
	      in_temp=false;
	      
	      int tnum = Integer.valueOf(tno);
	      if(tnum>3&&tnum<method_args.get(curr_func))
	      {
	        int tnum2=tnum-4;
	        
	        if(in_use)
	        {
	          //System.out.println("ALOAD v1 SPILLEDARG "+tnum2);
	          //rno = "v1 ";	
	          
	          	  if(!v1_used)
			  {
			    System.out.println("ALOAD v1 SPILLEDARG "+tnum2);
			    rno = "v1 ";
			    v1_used=true;
			    
			    if(debug10)
			    {
			      System.out.println("v1_used=true");
			    }
			    
			  }
			  else
			  {
			    System.out.println("ALOAD v0 SPILLEDARG "+tnum2);
			    rno = "v0 ";			    
			  }
	        }
	        else
	        {
	          rno="v1 ";
		  spill_in_stack=tno;   //
	        }        
	      }
	      else
	      {
	      
		      if(!(register.get(curr_func).get(tno).equals("stack")))
		      {
			rno = register.get(curr_func).get(tno)+" ";
		      }
		      else
		      {
			//temp is in stack
			if(!stack_loc.get(curr_func).containsKey(tno))
			{
			  stack_loc.get(curr_func).put(tno,spill_no);
			  spill_no++;			  
			}
			
			if(in_use)
			{
			  int pos = stack_loc.get(curr_func).get(tno);
			  
			  if(!v1_used)
			  {
			    System.out.println("ALOAD v1 SPILLEDARG "+pos);  //
			    rno = "v1 ";
			    v1_used=true;
			    
			    if(debug10)
			    {
			      System.out.println("v1_used=true");
			    }
			    
			  }
			  else
			  {
			    System.out.println("ALOAD v0 SPILLEDARG "+pos);
			    rno = "v0 ";			    
			  }
			}
			else
			{
			  rno="v1 ";
			  spill_in_stack=tno;   //
			}
		      }
	      
	      }
	      
	      if(in_call)
	      {
	        if(arg_no<4)   //
	        {
	          System.out.println("MOVE a"+arg_no+" "+rno);
	          arg_no++;
	        }
	        else
	        {
	          //move arg to stack
	          int y = arg_no-3;
	          System.out.println("PASSARG "+y+" "+rno);  //
	          arg_no++;	          
	        }	        
	      }
	      	            
	      _ret = (R) rno;
      }
      return _ret;
   }

   /**
    * f0 -> <INTEGER_LITERAL>
    */
   public R visit(IntegerLiteral n, A argu) {
      R _ret=null;
      
      if(pass==1)
      {
      	_ret = n.f0.accept(this, argu);
      }
      else
      {
        String num = (String) n.f0.accept(this, argu);
        
        if(!in_temp)
        {
          num=num+" ";
        }
        
        _ret = (R) num;
      }
      return _ret;
   }

   /**
    * f0 -> <IDENTIFIER>
    */
   public R visit(Label n, A argu) {
      R _ret=null;
      
      if(pass==1)
      {
        String id = (String) n.f0.accept(this, argu);
        
        if(debug3)
        {
          System.out.println("id = "+id);
        }
        
        if(!in_func_start)
        {          
          if(!methods.contains(id))
          {
            label_map.get(curr_func).put(id,label_no);                       
            label_no++;
          }
        }
        
        if(!in_stmt&&!in_func_start)
        {
          line_no++;
          label_lines.get(curr_func).put(id,line_no);
        }
        
        /*if(in_stmt_label)
        {          
          label_map.get(curr_func).put(id,label_no);
          label_no++;
        }*/
        
        _ret = (R) id;
      }
      else
      {
        String id = (String) n.f0.accept(this, argu);
        
        if(!in_func_start)
        {          
          if(!methods.contains(id))
          {
            int this_label = label_map.get(curr_func).get(id);
            id="L"+this_label+" ";
          }
          //System.out.print("L"+this_label);
          
          if(!in_stmt)
          {
            System.out.println(id);
          }
        }
        /*else
        {
          System.out.print(id);
        }*/
        
        
        _ret = (R) id;
      }
      
      return _ret;
   }

}
